<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[工作：天目云网站采集点增删改操作后的数据复查]]></title>
    <url>%2F2019%2F08%2F05%2F%E5%B7%A5%E4%BD%9C%EF%BC%9A%E5%A4%A9%E7%9B%AE%E4%BA%91%E7%BD%91%E7%AB%99%E9%87%87%E9%9B%86%E7%82%B9%E5%A2%9E%E5%88%A0%E6%94%B9%E6%93%8D%E4%BD%9C%E5%90%8E%E7%9A%84%E6%95%B0%E6%8D%AE%E5%A4%8D%E6%9F%A5%2F</url>
    <content type="text"><![CDATA[请输入密码以阅读这篇私密文章。 Incorrect Password! No content to display! ]]></content>
  </entry>
  <entry>
    <title><![CDATA[Mermaid]]></title>
    <url>%2F2019%2F08%2F05%2FMermaid%2F</url>
    <content type="text"><![CDATA[Mermaid Mermaid是一款开源的画流程图、甘特图、时序图工具，她提供了一种类似markdown的语法来创建各种图。 官网：Mermaid 基本用法：Mermaid基本语法 在线编辑器：在线编辑器 NexT-Mermaid设置next/_config.yml123456789# Mermaid tagmermaid: enable: true # Available themes: default | dark | forest | neutral theme: forest # Use 8.0.0 as default, jsdelivr as default CDN, works everywhere even in China cdn: //cdn.jsdelivr.net/npm/mermaid@8.0.0/dist/mermaid.min.js # CDNJS, provided by cloudflare, maybe the best CDN, but not works in China #cdn: //cdnjs.cloudflare.com/ajax/libs/mermaid/8.0.0/mermaid.min.js 使用mermaid.js1234&#123;% mermaid type %&#125;&#123;% endmermaid %&#125;type : mermaid chart的类型 实例流程图 书写 123456&#123;% mermaid graph TD %&#125;A--&gt;B;A--&gt;C;B--&gt;D;C--&gt;D;&#123;% endmermaid %&#125; 显示： graph TD A-->B; A-->C; B-->D; C-->D; 时序图 书写 1234567891011121314151617181920212223&#123;% mermaid sequenceDiagram %&#125;participant Aliceparticipant Bobparticipant John as John&lt;br/&gt;Second LineAlice -&gt;&gt; Bob: Hello Bob, how are you?Bob--&gt;&gt;John: How about you John?Bob--x Alice: I am good thanks!Bob-x John: I am good thanks!Note right of John: Bob thinks a long&lt;br/&gt;long time, so long&lt;br/&gt;that the text does&lt;br/&gt;not fit on a row.Bob--&gt;Alice: Checking with John...alt either thisAlice-&gt;&gt;John: Yeselse or thisAlice-&gt;&gt;John: Noelse or this will happenAlice-&gt;John: Maybeendpar this happens in parallelAlice --&gt;&gt; Bob: Parallel message 1andAlice --&gt;&gt; John: Parallel message 2end&#123;% endmermaid %&#125; 显示 sequenceDiagram participant Alice participant Bob participant John as JohnSecond Line Alice ->> Bob: Hello Bob, how are you? Bob-->>John: How about you John? Bob--x Alice: I am good thanks! Bob-x John: I am good thanks! Note right of John: Bob thinks a longlong time, so longthat the text doesnot fit on a row. Bob-->Alice: Checking with John... alt either this Alice->>John: Yes else or this Alice->>John: No else or this will happen Alice->John: Maybe end par this happens in parallel Alice -->> Bob: Parallel message 1 and Alice -->> John: Parallel message 2 end 甘特图 书写 1234567891011121314151617181920212223242526272829&#123;% mermaid gantt %&#125;dateFormat YYYY-MM-DDaxisFormat %d/%mtitle Adding GANTT diagram to mermaidsection A sectionCompleted task :done, des1, 2014-01-06,2014-01-08Active task :active, des2, 2014-01-09, 3dFuture task : des3, after des2, 5dFuture task2 : des4, after des3, 5dsection Critical tasksCompleted task in the critical line :crit, done, 2014-01-06,24hImplement parser and jison :crit, done, after des1, 2dCreate tests for parser :crit, active, 3dFuture task in critical line :crit, 5dCreate tests for renderer :2dAdd to mermaid :1dsection DocumentationDescribe gantt syntax :active, a1, after des1, 3dAdd gantt diagram to demo page :after a1 , 20hAdd another diagram to demo page :doc1, after a1 , 48hsection Last sectionDescribe gantt syntax :after doc1, 3dAdd gantt diagram to demo page : 20hAdd another diagram to demo page : 48h&#123;% endmermaid %&#125; 显示 gantt dateFormat YYYY-MM-DD axisFormat %d/%m title Adding GANTT diagram to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d section Documentation Describe gantt syntax :active, a1, after des1, 3d Add gantt diagram to demo page :after a1 , 20h Add another diagram to demo page :doc1, after a1 , 48h section Last section Describe gantt syntax :after doc1, 3d Add gantt diagram to demo page : 20h Add another diagram to demo page : 48h git分支图 书写 1234567891011121314151617&#123;% mermaid gitGraph: %&#125;options&#123; "nodeSpacing": 150, "nodeRadius": 10&#125;endcommitbranch newbranchcheckout newbranchcommitcommitcheckout mastercommitcommitmerge newbranch&#123;% endmermaid %&#125; 显示 gitGraph: options { "nodeSpacing": 150, "nodeRadius": 10 } end commit branch newbranch checkout newbranch commit commit checkout master commit commit merge newbranch 参考链接Mermaid]]></content>
      <categories>
        <category>前端</category>
        <category>Hexo</category>
        <category>NexT</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019年7月-12月学习计划]]></title>
    <url>%2F2019%2F08%2F02%2F2019%E5%B9%B47%E6%9C%88-12%E6%9C%88%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92%2F</url>
    <content type="text"><![CDATA[gantt dateFormat YYYY-MM-DD title 2019年7月-12月学习计划 section 7/19-8/22 Python和MySQL:2019-07-19, 34d section 8/23-9/28 数据结构与算法基础: 2019-08-23, 36d section 9/28-11/17 数据分析: 2019-09-28, 50d section 11/18-12/31 web开发: 2019-11-18, 43d]]></content>
      <categories>
        <category>计划</category>
      </categories>
      <tags>
        <tag>计划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Excel函数]]></title>
    <url>%2F2019%2F08%2F01%2FExcel%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[Left()与LeftB():含截取到倒数指定字符如果要从左边开始截取字符，在Excel中，可以用Left()和；其中Left()是按字符个数截取，LeftB()是按字节个数截取；它们的区别在于，Left()把每个汉字算一个字符，而 LeftB()把每个汉字算两个字节；每个数字和字母，它们都算一个。 语法 Left() 表达式：LEFT(text, [Num_Chars]) 中文表达式：LEFT(文本, [截取字符个数]) LeftB() 表达式：LEFTB(text, [Num_Bytes]) 中文表达式：LEFTB(文本, [截取字节个数]) 说明： Num_Chars为可选项，若省略，则默认截取一个字符。Num_Bytes也为可选项，若省略，则默认截取一个字节。 Num_Chars必须大于等于0，如果Num_Chars大于文本长度，则返回所有文本。Num_Bytes也必须大于等于0；若文本全是中文，Num_Bytes大于等于文本长度的两倍，则返回把有文本；若文本由字母或数字组成，Num_Bytes大于等于文本长度，则返回所有文本。 使用方法及实例 Left() 假如要截取3个汉字。选中E2单元格，输入公式=LEFT(B2,3)，按回车，返回“蝴蝶结”三个字，操作过程步骤，如下图所示： LeftB() 把公式=LEFTB(A1,5)复制到B2单元格，按回车，则返回Excel；双击B2，把公式改为=LEFTB(A1,10)，按回车，则返回“Excel 2016”；操作过程步骤，如下图所示： 从两次返回结果可以看出，LeftB函数把字母、数字和空格都当成一个字节。 Find()与FindB():返回指定字符位置在Excel中，查找指定字符在源字符串中的位置，既可以用Find()，也可以用FindB()，它们都有三个参数，所不同的是，前者把汉字、字母和数字都算一个字符，后者把汉字算两个字节，数字和字母算一个字节。 语法 Find() 表达式：FIND(Find_Text, Within_Text, [Start_Num]) 中文表达式：FIND(查找文本, 源文本, [查找开始位置]) FindB() 表达式：FINDB(Find_Text, Within_Text, [Start_Num]) 中文表达式：FINDB(查找文本, 源文本, [查找开始位置]) 说明： FIND和FINDB区分大小写，并且不允许使用通配符。如果希望执行区分大小写的搜索或使用通配符，则可以使用 SEARCH和SEARCHB函数。 如果find_text为空文本 (“”)，则FIND会匹配搜索字符串中的首字符（即编号为start_num或1的字符）。 Find_text不能包含任何通配符。 如果find_text未显示在within_text中, 则FIND和FINDB返回#VALUE!。 如果start_num不大于零, 则FIND和FINDB返回#VALUE!。 如果start_num大于within_text的长度, 则FIND和FINDB返回#VALUE!。 可以使用start_num来跳过指定数目的字符。以FIND为例，假设要处理文本字符串“AYF0093.YoungMensApparel”。若要在文本字符串的说明部分中查找第一个“Y”的编号，请将start_num设置为8，这样就不会搜索文本的序列号部分。FIND从第8个字符开始查找，在下一个字符处找到find_text，然后返回其编号9。FIND始终返回从within_text 的起始位置计算的字符编号，如果start_num大于1，则会对跳过的字符计数。 使用方法及实例 数据 A 2 Miriam McGovern 公式 说明 结果 =FIND(“M”,A2) 单元格 A2 中第一个“M”的位置 1 =FIND(“m”,A2) 单元格 A2 中第一个“M”的位置 6 =FIND(“M”,A2,3) 从单元格 A2 的第三个字符开始查找第一个“M”的位置 8 参考文章 微软支持-Excel-公式和函数 Excel Left函数与LeftB函数使用方法，含截取到倒数指定字符实例]]></content>
      <categories>
        <category>工具</category>
        <category>Excel</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[工作：天目云租户转成品库采集点增删改自动化查询]]></title>
    <url>%2F2019%2F07%2F31%2F%E5%B7%A5%E4%BD%9C%EF%BC%9A%E5%A4%A9%E7%9B%AE%E4%BA%91%E7%A7%9F%E6%88%B7%E8%BD%AC%E6%88%90%E5%93%81%E5%BA%93%E9%87%87%E9%9B%86%E7%82%B9%E5%A2%9E%E5%88%A0%E6%94%B9%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9F%A5%E8%AF%A2%2F</url>
    <content type="text"><![CDATA[请输入密码以阅读这篇私密文章。 Incorrect Password! No content to display! ]]></content>
  </entry>
  <entry>
    <title><![CDATA[Python：遍历列表时删除元素]]></title>
    <url>%2F2019%2F07%2F31%2FPython%EF%BC%9A%E9%81%8D%E5%8E%86%E5%88%97%E8%A1%A8%E6%97%B6%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0%2F</url>
    <content type="text"><![CDATA[Python的for循环可以遍历一个列表，但若需要同时将符合条件的元素删除时，则会出错。 示例 代码1123456s = [1, 2, 3, 4, 1, 1]s1 = sfor i in s1: if i == 1: s1.remove(i)print(s1) 输出1 1[2, 3, 4, 1] 代码2 12345s2 = sfor idx in range(len(s2)): if s2[idx] == 1: del s2[idx]print(s2) 输出2 1234Traceback (most recent call last): File "temp.py", line 11, in &lt;module&gt; if s2[idx] == 1:IndexError: list index out of range 出错原因Python中用for发起任何形式的遍历时，它的遍历顺序都是从最初就确定的，而在遍历中删除了元素会导致当前索引的变化，所以遍历中间取到的索引的那个值已经变了，会漏掉一些元素。另一种错误是删除元素后列表长度缩小了，所以会超出索引范围。 正确删除法使用filter()函数过滤掉符合指定条件的元素。12s3 = sprint(list(filter(lambda x: x != 1, s3))) 输出结果： 1[2, 3, 4] 此处lambda为Python中函数的简化定义形式。 使用列表解析式。12s4 = [i for i in s if i != 1]print(s4) 输出结果： 1[2, 3, 4] 拷贝一个新列表把原始列表拷贝给一个新列表，遍历新列表，修改原始列表（或相反）。 12345s6 = sfor i in s6[:]: if i == 1: s6.remove(i)print(s6) 输出结果： 1[2, 3, 4] 但是，下面的赋值操作给新列表是不行的，因为新变量和原变量的物理地址是相同的，可通过id()函数查看。 12345s5 = sfor i in s: if i == 1: s5.remove(i)print(s5) 输出结果： 1[2, 3, 4, 1] 通过深拷贝解决 1234567import copys5 = copy.deepcopy(s)for i in s: if i == 1: s5.remove(i)print(s5) 输出结果： 1[2, 3, 4] 用while循环来做判断条件。1234s7 = swhile 1 in s7: s7.remove(1)print(s7) 输出结果： 1[2, 3, 4]]]></content>
      <categories>
        <category>计算机</category>
        <category>语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>计算机：语言</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python学习：Python基础（中）]]></title>
    <url>%2F2019%2F07%2F24%2FPython%E5%AD%A6%E4%B9%A0%EF%BC%9APython%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%AD%EF%BC%89%2F</url>
    <content type="text"><![CDATA[数据结构（下）:Python容器列表：list list是由任意类型元素组成的序列。列表非常适合利用顺序和位置定位某一元素，尤其是当元素的顺序或内容经常发生改变时。与字符串不同，列表是可变的。你可以直接对原始列表进行修改：添加新元素、删除 或覆盖已有元素。在列表中，具有相同值的元素允许出现多次。 *Python中的三种序列结构：字符串，列表，元组。它们都可以包含零个或多个元素。与字符串不同的是，元组和列表并不要求所含元素的种类相同，每个元素都可以是任何Python类型的对象。而对于列表和元组来说，元组是不可变的，当你给元组赋值时，这些值便被固定在了元组里，再也无法修改。然而，列表却是可变的，这意味着可以随意地插入或删除其中的元素。 list =&gt; [&lt;exp&gt;,&lt;exp&gt;] 创建列表:使用[]或list()1234&gt;&gt;&gt; empty_list = [] &gt;&gt;&gt; weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'] &gt;&gt;&gt; big_birds = ['emu', 'ostrich', 'cassowary'] &gt;&gt;&gt; first_names = ['Graham', 'John', 'Terry', 'Terry', 'Michael'] 也可以使用list()函数来创建一个空列表： 123&gt;&gt;&gt; another_empty_list = list() &gt;&gt;&gt; another_empty_list [] 转换成列表:使用list()Python的list()函数可以将其他数据类型转换成列表类型。 123456789101112131415161718# 将字符串-》列表&gt;&gt;&gt; list('cat') ['c', 'a', 't']# 使用 split() 可以依据分隔符将字符串切割成由若干子串组成的列表：&gt;&gt;&gt; birthday = '1/6/1952' &gt;&gt;&gt; birthday.split('/') ['1', '6', '1952']# 如果待分割的字符串中包含连续的分隔符，那么在返回的列表中会出现空串元素：&gt;&gt;&gt; splitme = 'a/b//c/d///e' &gt;&gt;&gt; splitme.split('/') ['a', 'b', '', 'c', 'd', '', '', 'e']# 将元组-》列表&gt;&gt;&gt; a_tuple = ('ready', 'fire', 'aim') &gt;&gt;&gt; list(a_tuple) ['ready', 'fire', 'aim'] 获取列表元素：使用[offset]和字符串一样，通过偏移量可以从列表中提取对应位置的元素： 12345678910111213141516&gt;&gt;&gt; marxes = ['Groucho', 'Chico', 'Harpo'] &gt;&gt;&gt; marxes[0] 'Groucho' &gt;&gt;&gt; marxes[1] 'Chico' &gt;&gt;&gt; marxes[2] 'Harpo'#负偏移量代表从尾部开始计数：&gt;&gt;&gt; marxes[-1] 'Harpo' &gt;&gt;&gt; marxes[-2] 'Chico' &gt;&gt;&gt; marxes[-3] 'Groucho' &gt;&gt;&gt; *指定的偏移量对于待访问列表必须有效——该位置的元素在访问前已正确赋值。当指定的偏移量小于起始位置或者大于末尾位置时，会产生异常（错误）。 包含列表的列表列表可以包含各种类型的元素，包括其他列表，如下所示： 123456789101112&gt;&gt;&gt; small_birds = ['hummingbird', 'finch'] &gt;&gt;&gt; extinct_birds = ['dodo', 'passenger pigeon', 'Norwegian Blue'] &gt;&gt;&gt; carol_birds = [3, 'French hens', 2, 'turtledoves'] &gt;&gt;&gt; all_birds = [small_birds, extinct_birds, 'macaw', carol_birds]# all_birds结构&gt;&gt;&gt; all_birds [['hummingbird', 'finch'], ['dodo', 'passenger pigeon', 'Norwegian Blue'], 'macaw', [3, 'French hens', 2, 'turtledoves']]# all_birds第一个元素&gt;&gt;&gt; all_birds[0] ['hummingbird', 'finch'] 使用[offset]修改元素就像可以通过偏移量访问某元素一样，你也可以通过赋值对它进行修改： 1234&gt;&gt;&gt; marxes = ['Groucho', 'Chico', 'Harpo'] &gt;&gt;&gt; marxes[2] = 'Wanda' &gt;&gt;&gt; marxes ['Groucho', 'Chico', 'Wanda'] *与之前一样，列表的偏移量必须是合法有效的。 指定范围并使用切片提取元素列表的切片仍然是一个列表。可以使用切片提取列表的一个子序列,与字符串一样，列表的切片也可以设定除1以外的步长。 1234567891011&gt;&gt;&gt; marxes = ['Groucho', 'Chico,' 'Harpo'] &gt;&gt;&gt; marxes[0:2] ['Groucho', 'Chico']#从列表的开头开始每2个提取一个元素&gt;&gt;&gt; marxes[::2] ['Groucho', 'Harpo']# 可以巧妙地实现列表逆序：&gt;&gt;&gt; marxes[::-1] ['Harpo', 'Chico', 'Groucho'] 添加元素至尾部:使用append()利用append()函数将元素一个个添加到尾部。 123&gt;&gt;&gt; marxes.append('Zeppo') &gt;&gt;&gt; marxes ['Groucho', 'Chico', 'Harpo', 'Zeppo'] 合并列表：使用extend()或+=使用extend()可以将一个列表合并到另一个列表中。 12345&gt;&gt;&gt; marxes = ['Groucho', 'Chico', 'Harpo', 'Zeppo'] &gt;&gt;&gt; others = ['Gummo', 'Karl'] &gt;&gt;&gt; marxes.extend(others) &gt;&gt;&gt; marxes ['Groucho', 'Chico', 'Harpo', 'Zeppo', 'Gummo', 'Karl'] 也可以使用+=： 12345&gt;&gt;&gt; marxes = ['Groucho', 'Chico', 'Harpo', 'Zeppo'] &gt;&gt;&gt; others = ['Gummo', 'Karl'] &gt;&gt;&gt; marxes += others &gt;&gt;&gt; marxes ['Groucho', 'Chico', 'Harpo', 'Zeppo', 'Gummo', 'Karl'] 如果使用了append()，那么others会被当成一个单独的元素进行添加,而不是将其中的内容进行合并： 12345&gt;&gt;&gt; marxes = ['Groucho', 'Chico', 'Harpo', 'Zeppo'] &gt;&gt;&gt; others = ['Gummo', 'Karl'] &gt;&gt;&gt; marxes.append(others) &gt;&gt;&gt; marxes ['Groucho', 'Chico', 'Harpo', 'Zeppo', ['Gummo', 'Karl']] 在指定位置插入元素 :使用insert()append()函数只能将新元素插入到列表尾，而使用insert()可以将元素插入到列表的任 意位置。指定偏移量为0可以插入列表头部。如果指定的偏移量超过了尾部，则会插入到 列表最后，就如同append() 一样，这一操作不会产生 Python 异常。 12345&gt;&gt;&gt; marxes.insert(3, 'Gummo')&gt;&gt;&gt; marxes ['Groucho', 'Chico', 'Harpo', 'Gummo', 'Zeppo'] &gt;&gt;&gt; marxes.insert(10, 'Karl') &gt;&gt;&gt; marxes ['Groucho', 'Chico', 'Harpo', 'Gummo', 'Zeppo', 'Karl'] 删除指定位置的元素:使用del当列表中一个元素被删除后,位于它后面的元素会自动往前移动填补空出的位置，且列表 长度减 1。再试试从更新后的marxes列表中删除&#39;Harpo&#39;： 1234567&gt;&gt;&gt; marxes = ['Groucho', 'Chico', 'Harpo', 'Gummo', 'Zeppo'] &gt;&gt;&gt; marxes[2] 'Harpo' &gt;&gt;&gt; del marxes[2] &gt;&gt;&gt; marxes ['Groucho', 'Chico', 'Gummo', 'Zeppo'] &gt;&gt;&gt; marxes[2] 'Gummo' 在列表首删除/插入一个元素与在列表尾插入一个元素所用的时间是谁大？或者一样？123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051# 计算时间函数&gt;&gt;&gt; from time import clock&gt;&gt;&gt; def timer(f):&gt;&gt;&gt; def _f(*args):&gt;&gt;&gt; t0 = clock()&gt;&gt;&gt; f(*args)&gt;&gt;&gt; return clock() - t0&gt;&gt;&gt; return _f # 删除 &gt;&gt;&gt; def delete_elem(x, index):&gt;&gt;&gt; del x[index]&gt;&gt;&gt; x = [5] * 100000000&gt;&gt;&gt; print(x[0])5&gt;&gt;&gt; print(x[999999])5&gt;&gt;&gt; print(len(x))100000000&gt;&gt;&gt; end_del = timer(delete_elem)(x, -1)&gt;&gt;&gt; print('现在list长度:',len(x))现在list长度: 99999999&gt;&gt;&gt; start_del = timer(delete_elem)(x, 0)&gt;&gt;&gt; print('现在list长度:',len(x))现在list长度: 99999998&gt;&gt;&gt; print('删首时间/删尾时间',start_del/end_del)删首时间/删尾时间 5339.656807434651# 插入&gt;&gt;&gt; def insert_elem(x, index, v):&gt;&gt;&gt; x.insert(index, v) &gt;&gt;&gt; x = [5] * 100000000&gt;&gt;&gt; print(x[0])5&gt;&gt;&gt; print(x[999999])5&gt;&gt;&gt; print(len(x))100000000&gt;&gt;&gt; start_del = timer(insert_elem)(x, 0, 9)&gt;&gt;&gt; print(len(x))100000001&gt;&gt;&gt; end_del = timer(insert_elem)(x, -1, 9)&gt;&gt;&gt; print(len(x))100000002&gt;&gt;&gt; print('删首时间/删尾时间',start_del/end_del)删首时间/删尾时间 200615.78078284615 由上面可知在列表首删除/插入一个元素远远大于在列表尾插入一个元素所用的时间。原因在于列表在存储时，是存在于一片连续的储存单元中。删除最后一个元素时候，只要根据index找到该元素，然后删除。而删除第一个元素时候，需要找到第一个元素删除的同时，需要把其后面的元素移前一个位置。插入同理。 删除具有指定值的元素:使用remove()1234&gt;&gt;&gt; marxes = ['Groucho', 'Chico', 'Harpo', 'Gummo', 'Zeppo'] &gt;&gt;&gt; marxes.remove('Gummo') &gt;&gt;&gt; marxes ['Groucho', 'Chico', 'Harpo', 'Zeppo'] 获取并删除指定位置的元素:使用pop()使用pop()同样可以获取列表中指定位置的元素，但在获取完成后，该元素会被自动删除。如果你为pop()指定了偏移量，它会返回偏移量对应位置的元素；如果不指定，则默认使用-1。因此，pop(0)将返回列表的头元素，而pop()或pop(-1)则会返回列表的尾元素 123456789&gt;&gt;&gt; marxes = ['Groucho', 'Chico', 'Harpo', 'Zeppo'] &gt;&gt;&gt; marxes.pop() 'Zeppo' &gt;&gt;&gt; marxes ['Groucho', 'Chico', 'Harpo'] &gt;&gt;&gt; marxes.pop(1) 'Chico' &gt;&gt;&gt; marxes ['Groucho', 'Harpo'] 查询具有特定值的元素位置:使用index()如果该查询的元素在列表中不存在，使用index时会报异常。 123&gt;&gt;&gt; marxes = ['Groucho', 'Chico', 'Harpo', 'Zeppo'] &gt;&gt;&gt; marxes.index('Chico') 1 判断值是否存在：使用in同一个值可能出现在列表的多个位置，但只要至少出现一次，in就会返回True： 12&gt;&gt;&gt; words = ['a', 'deer', 'a' 'female', 'deer'] &gt;&gt;&gt; 'deer' in words True 记录特定值出现的次数:使用count()123456789&gt;&gt;&gt; marxes = ['Groucho', 'Chico', 'Harpo'] &gt;&gt;&gt; marxes.count('Harpo') 1 &gt;&gt;&gt; marxes.count('Bob')0 &gt;&gt;&gt; snl_skit = ['cheeseburger', 'cheeseburger', 'cheeseburger']&gt;&gt;&gt; snl_skit.count('cheeseburger') 3 转换为字符串:使用join()join()实际上是一个字符串方法，而不是列表方法。不能通过marxes.join(&#39;,&#39;)进行调用，尽管这可能看起来更直观。join() 函数的参数是字符串或者其他可迭代的包含字符串的序列，它的输出是一个字符串。。试着这样来记忆 join() 的调用顺序： join()是split()的逆过程 12345678910111213&gt;&gt;&gt; marxes = ['Groucho', 'Chico', 'Harpo'] &gt;&gt;&gt; ', '.join(marxes) 'Groucho, Chico, Harpo'&gt;&gt;&gt; friends = ['Harry', 'Hermione', 'Ron'] &gt;&gt;&gt; separator = ' * ' &gt;&gt;&gt; joined = separator.join(friends) &gt;&gt;&gt; joined 'Harry * Hermione * Ron' &gt;&gt;&gt; separated = joined.split(separator) &gt;&gt;&gt; separated ['Harry', 'Hermione', 'Ron'] &gt;&gt;&gt; separated == friends True 获取长度:使用len()123&gt;&gt;&gt; marxes = ['Groucho', 'Chico', 'Harpo'] &gt;&gt;&gt; len(marxes) 3 使用sort()重新排列元素将列表中的元素按值排序,Python 为此 提供了两个函数： 列表方法sort()会对原列表进行排序，改变原列表内容； 通用函数sorted()则会返回排好序的列表副本，原列表内容不变。 如果列表中的元素都是数字，它们会默认地被排列成从小到大的升序。如果元素都是字符 串，则会按照字母表顺序排列 1234567891011# sorted_marxes是一个副本，它的创建并不会改变原始列表的内容&gt;&gt;&gt; marxes = ['Groucho', 'Chico', 'Harpo'] &gt;&gt;&gt; sorted_marxes = sorted(marxes) &gt;&gt;&gt; sorted_marxes ['Chico', 'Groucho', 'Harpo']&gt;&gt;&gt; marxes ['Groucho', 'Chico', 'Harpo']# 但对 marxes 列表调用列表函数 sort() 则会改变它的内容&gt;&gt;&gt; marxes.sort() &gt;&gt;&gt; marxes ['Chico', 'Groucho', 'Harpo'] 当列表中的所有元素都是同一种类型时（例如marxes中都是字符串），sort()会正常工作。有些时候甚至多种类型也可——例如整型和浮点型——只要它们之间能够自动地互相转换 123&gt;&gt;&gt; numbers = [2, 1, 4.0, 3] &gt;&gt;&gt; numbers.sort() &gt;&gt;&gt; numbers [1, 2, 3, 4.0] 默认的排序是升序的，通过添加参数reverse=True可以改变为降序排列 1234&gt;&gt;&gt; numbers = [2, 1, 4.0, 3] &gt;&gt;&gt; numbers.sort(reverse=True) &gt;&gt;&gt; numbers[4.0, 3, 2, 1] 使用=赋值，使用copy()复制如果将一个列表赋值给了多个变量，改变其中的任何一处会造成其他变量对应的值也被修改。 1234567&gt;&gt;&gt; a = [1, 2, 3] &gt;&gt;&gt; a [1, 2, 3] &gt;&gt;&gt; b = a &gt;&gt;&gt; b [1, 2, 3] &gt;&gt;&gt; a[0] = 'surprise' &gt;&gt;&gt; a ['surprise', 2, 3]&gt;&gt;&gt; b ['surprise', 2, 3] b与a实际上指向的是同一个对象，因此，无论我们是通过a还是通过b来修改列表的内容，其结果都会作用于双方。通过下面任意一种方法，都可以将一个列表的值复制到另一个新的列表中： 列表copy()函数 list()转换函数 列表分片[:]1234567891011121314&gt;&gt;&gt; a = [1, 2, 3] &gt;&gt;&gt; b = a.copy() &gt;&gt;&gt; c = list(a) &gt;&gt;&gt; d = a[:]&gt;&gt;&gt; a[0] = 'integer lists are boring' &gt;&gt;&gt; a ['integer lists are boring', 2, 3] &gt;&gt;&gt; b [1, 2, 3] &gt;&gt;&gt; c [1, 2, 3] &gt;&gt;&gt; d [1, 2, 3] 元组：Tuple元组也是由任意类型元素组成的序列。与列表不同的是，元组是不可变的，这意味着一旦元组被定义，将无法再进行增加、删除或修改元素等操作。因此，元组就像是一个常量列表。 创建元组：使用()可以用 () 创建一个空元组： 123&gt;&gt;&gt; empty_tuple = () &gt;&gt;&gt; empty_tuple () 创建包含一个或多个元素的元组时，每一个元素后面都需要跟着一个逗号，即使只包含一个元素也不能省略： 123&gt;&gt;&gt; one_marx = 'Groucho', &gt;&gt;&gt; one_marx ('Groucho',) 如果创建的元组所包含的元素数量超过1，最后一个元素后面的逗号可以省略： 123&gt;&gt;&gt; marx_tuple = 'Groucho', 'Chico', 'Harpo' &gt;&gt;&gt; marx_tuple ('Groucho', 'Chico', 'Harpo') Python的交互式解释器输出元组时会自动添加一对圆括号。你并不需要这么做——定义元组真正靠的是每个元素的后缀逗号——但如果你习惯添加一对括号也无可厚非。可以用括号将所有元素包裹起来，这会使得程序更加清晰： 123&gt;&gt;&gt; marx_tuple = ('Groucho', 'Chico', 'Harpo') &gt;&gt;&gt; marx_tuple ('Groucho', 'Chico', 'Harpo') 可以一口气将元组赋值给多个变量：(有时这个过程被称为元组解包。) 12345678&gt;&gt;&gt; marx_tuple = ('Groucho', 'Chico', 'Harpo') &gt;&gt;&gt; a, b, c = marx_tuple &gt;&gt;&gt; a 'Groucho' &gt;&gt;&gt; b 'Chico' &gt;&gt;&gt; c 'Harpo' 可以利用元组在一条语句中对多个变量的值进行交换，而不需要借助临时变量： 1234567&gt;&gt;&gt; password = 'swordfish' &gt;&gt;&gt; icecream = 'tuttifrutti' &gt;&gt;&gt; password, icecream = icecream, password &gt;&gt;&gt; password 'tuttifrutti' &gt;&gt;&gt; icecream 'swordfish' tuple() 函数可以用其他类型的数据来创建元组： 123&gt;&gt;&gt; marx_list = ['Groucho', 'Chico', 'Harpo'] &gt;&gt;&gt; tuple(marx_list) ('Groucho', 'Chico', 'Harpo') 元组与列表在许多地方都可以用元组代替列表，但元组的方法函数与列表相比要少一些——元组没有append()、insert()，等等——因为一旦创建元组便无法修改。既然列表更加灵活，那为什么不在所有地方都使用列表呢？原因如下所示： 元组占用的空间较小 你不会意外修改元组的值 可以将元组用作字典的键 - 命名元组可以作为对象的替代 函数的参数是以元组形式传递的 字典: dict字典（dictionary）与列表类似，但其中元素的顺序无关紧要，因为它们不是通过像0或1的偏移量访问的。取而代之，每个元素拥有与之对应的互不相同的键（key），需要通过键来访问元素。键通常是字符串，但它还可以是Python中其他任意的不可变类型：布尔型、 整型、浮点型、元组、字符串，以及其他一些在后面的内容中会见到的类型。字典是可变的，因此你可以增加、删除或修改其中的键值对。 创建字典:使用{}用大括号（{}）将一系列以逗号隔开的键值对（key:value）包裹起来即可进行字典的创建。最简单的字典是空字典，它不包含任何键值对： 12345678910111213141516&gt;&gt;&gt; empty_dict = &#123;&#125; &gt;&gt;&gt; empty_dict &#123;&#125;&gt;&gt;&gt; pizza = &#123; "size":"medium", "type":"pepperoni", "crust":"Thick", "qty": 1, "deliver":True,&#125;&#123;'size': 'medium', 'type': 'pepperoni', 'crust': 'Thick', 'qty': 1, 'deliver': True&#125; Python 允许在列表、元组或字典的最后一个元素后面添加逗号，这不会产生任何问题。此外，在括号之间输入键值对来创建字典时并不强制缩进。 转换为字典：使用dict()可以用 dict() 将包含双值子序列的序列转换成字典。每个子序列 的第一个元素作为键，第二个元素作为值。 1234567&gt;&gt;&gt; lot = [ ('a', 'b'), ('c', 'd'), ('e', 'f') ] &gt;&gt;&gt; dict(lot) &#123;'c': 'd', 'a': 'b', 'e': 'f'&#125;&gt;&gt;&gt; los = [ 'ab', 'cd', 'ef' ] &gt;&gt;&gt; dict(los) &#123;'c': 'd', 'a': 'b', 'e': 'f'&#125; 添加或修改元素:使用[key]向字典中添加元素非常简单，只需指定该元素的键并赋予相应的值即可。如果该元素的键已经存在于字典中，那么该键对应的旧值会被新值取代。如果该元素的键并未在字典中出现，则会被加入字典。与列表不同，你不需要担心赋值过程中Python 会抛出越界异常。 123456789101112131415161718192021222324252627282930313233&gt;&gt;&gt; pythons = &#123; 'Chapman': 'Graham', 'Cleese': 'John', 'Idle': 'Eric', 'Jones': 'Terry', 'Palin': 'Michael', &#125; &gt;&gt;&gt; pythons &#123;'Cleese': 'John','Jones': 'Terry', 'Palin': 'Michael','Chapman': 'Graham', 'Idle': 'Eric'&#125;# 新增 pythons['Gilliam'] = 'Gerry'&gt;&gt;&gt; pythons['Gilliam'] = 'Gerry' &gt;&gt;&gt; pythons &#123;'Cleese': 'John', 'Gilliam': 'Gerry', 'Palin': 'Michael', 'Chapman': 'Graham', 'Idle': 'Eric', 'Jones': 'Terry'&#125;# 修改pythons['Gilliam'] = 'Terry'&gt;&gt;&gt; pythons['Gilliam'] = 'Terry' &gt;&gt;&gt; pythons &#123;'Cleese': 'John', 'Gilliam': 'Terry', 'Palin': 'Michael', 'Chapman': 'Graham', 'Idle': 'Eric', 'Jones': 'Terry'&#125; 合并字典：使用update()如果待添加的字典与待扩充的字典包含同样的键，那么新归入字典的值会取代原有的值 12345&gt;&gt;&gt; first = &#123;'a': 1, 'b': 2&#125; &gt;&gt;&gt; second = &#123;'b': 'platypus'&#125; &gt;&gt;&gt; first.update(second) &gt;&gt;&gt; first &#123;'b': 'platypus', 'a': 1&#125; 删除具有指定键的元素:使用del1234&gt;&gt;&gt; first = &#123;'a': 1, 'b': 2&#125; &gt;&gt;&gt; del first['a']&gt;&gt;&gt; first&#123;'b': 2&#125; 删除所有元素:使用clear()使用clear()，或者给字典变量重新赋值一个空字典（{}）可以将字典中所有元素删除： 123456&gt;&gt;&gt; pythons.clear() &gt;&gt;&gt; pythons &#123;&#125; &gt;&gt;&gt; pythons = &#123;&#125; &gt;&gt;&gt; pythons&#123;&#125; 使用in判断是否存在如果你希望判断某一个键是否存在于一个字典中，可以使用in。 12345&gt;&gt;&gt; pythons = &#123;'Chapman': 'Graham', 'Cleese': 'John', 'Jones': 'Terry', 'Palin': 'Michael'&#125;&gt;&gt;&gt; 'Chapman' in pythons True &gt;&gt;&gt; 'Palin' in pythons True 使用[key]获取元素这是对字典最常进行的操作，只需指定字典名和键即可获得对应的值： 12&gt;&gt;&gt; pythons['Cleese'] 'John' 如果字典中不包含指定的键，会产生一个异常。有两种方法可以避免这种情况的发生。第一种是在访问前通过in测试键是否存在，另一种方法是使用字典函数get()。你需要指定字典名，键以及一个可选值。如果键存在，会得到与之对应的值反之，若键不存在，如果你指定了可选值，那么get()函数将返回这个可选值,否则，会得到None（在交互式解释器中什么也不会显示）： 12345678&gt;&gt;&gt; pythons.get('Cleese') 'John'&gt;&gt;&gt; pythons.get('Marx', 'Not a Python') 'Not a Python'&gt;&gt;&gt; pythons.get('Marx') &gt;&gt;&gt; 获取所有键:使用keys()使用keys()可以获得字典中的所有键。在接下来的几个例子中，我们将换一个示例： 123&gt;&gt;&gt; signals = &#123;'green': 'go', 'yellow': 'go faster', 'red': 'smile for the camera'&#125; &gt;&gt;&gt; signals.keys() dict_keys(['green', 'red', 'yellow']) 在Python 2里，keys()会返回一个列表，而在Python 3中则会返回dict_keys()，它是键的迭代形式。这种返回形式对于大型的字典非常有用，因为它不需要时间和空间来创建返回的列表。有时你需要的可能就是一个完整的列表，但在Python 3中，你只能自己调用list()将dict_keys转换为列表类型。 获取所有值:使用values()使用 values()可以获取字典中的所有值： 12&gt;&gt;&gt; list( signals.values() ) ['go', 'smile for the camera', 'go faster'] 获取所有键值对:使用items()使用items()函数可以获取字典中所有的键值对： 12&gt;&gt;&gt; list( signals.items() ) [('green', 'go'), ('red', 'smile for the camera'), ('yellow', 'go faster')] 每一个键值对以元组的形式返回，例如(&#39;green&#39;,&#39;go&#39;)。 使用=赋值，使用copy()复制与列表一样，对字典内容进行的修改会反映到所有与之相关联的变量名上： 12345&gt;&gt;&gt; signals = &#123;'green': 'go', 'yellow': 'go faster', 'red': 'smile for the camera'&#125; &gt;&gt;&gt; save_signals = signals &gt;&gt;&gt; signals['blue'] = 'confuse everyone' &gt;&gt;&gt; save_signals&#123;'blue': 'confuse everyone', 'green': 'go', 'red': 'smile for the camera', 'yellow': 'go faster'&#125; 若想避免这种情况，可以使用copy(),将字典复制到一个新的字典中： 1234567&gt;&gt;&gt; signals = &#123;'green': 'go', 'yellow': 'go faster', 'red': 'smile for the camera'&#125; &gt;&gt;&gt; original_signals = signals.copy() &gt;&gt;&gt; signals['blue'] = 'confuse everyone' &gt;&gt;&gt; signals &#123;'blue': 'confuse everyone', 'green': 'go', 'red': 'smile for the camera', 'yellow': 'go faster'&#125; &gt;&gt;&gt; original_signals &#123;'green': 'go', 'red': 'smile for the camera', 'yellow': 'go faster'&#125; 集合：set集合就像舍弃了值，仅剩下键的字典一样。键与键之间也不允许重复。如果你仅仅想知道某一个元素是否存在而不关心其他的，使用集合是个非常好的选择。 创建集合:使用set()与字典的键一样，集合是无序的。 123456789&gt;&gt;&gt; empty_set = set() &gt;&gt;&gt; empty_set set() &gt;&gt;&gt; even_numbers = &#123;0, 2, 4, 6, 8&#125; &gt;&gt;&gt; even_numbers &#123;0, 8, 2, 4, 6&#125; &gt;&gt;&gt; odd_numbers = &#123;1, 3, 5, 7, 9&#125; &gt;&gt;&gt; odd_numbers &#123;9, 3, 1, 5, 7&#125; 将其他类型转换为集合:使用set()利用已有列表、字符串、元组或字典的内容来创建集合，其中重复的值会被丢弃。 1234&gt;&gt;&gt; set( 'letters' )&#123;'l', 'e', 't', 'r', 's'&#125;&gt;&gt;&gt; set( ('Ummagumma', 'Echoes', 'Atom Heart Mother') ) &#123;'Ummagumma', 'Atom Heart Mother', 'Echoes'&#125; 测试值是否存在:使用in123&gt;&gt;&gt; martini = &#123;'vodka', 'vermouth'&#125;&gt;&gt;&gt; 'vodka' in martiniTrue 合并及运算符交集：通过使用特殊标点符号&amp;或者集合函数intersection() 获取集合的交集（两集合共有元素） 123456&gt;&gt;&gt; a = &#123;1, 2&#125; &gt;&gt;&gt; b = &#123;2, 3&#125;&gt;&gt;&gt; a &amp; b &#123;2&#125; &gt;&gt;&gt; a.intersection(b) &#123;2&#125; 并集：使用 |或者union()函数来获取集合的并集（至少出现在一个集合中的元素）： 123456&gt;&gt;&gt; a = &#123;1, 2&#125; &gt;&gt;&gt; b = &#123;2, 3&#125;&gt;&gt;&gt; a | b &#123;1, 2, 3&#125; &gt;&gt;&gt; a.union(b) &#123;1, 2, 3&#125; 差集：使用字符-或者difference()可以获得两个集合的差集（出现在第一个集合但不出现在第二个集合）： 1234&gt;&gt;&gt; a - b &#123;1&#125; &gt;&gt;&gt; a.difference(b) &#123;1&#125; 异或集:使用^或者symmetric_difference()可以获得两个集合的异或集（仅在两个集合中出现一次）： 1234&gt;&gt;&gt; a ^ b &#123;1, 3&#125; &gt;&gt;&gt; a.symmetric_difference(b) &#123;1, 3&#125; 子集：使用&lt;=或者issubset()可以判断一个集合是否是另一个集合的子集（第一个集合的所有元素都出现在第二个集合中）： 1234&gt;&gt;&gt; a &lt;= b False &gt;&gt;&gt; a.issubset(b) False 真子集:当第二个集合包含所有第一个集合的元素，且仍包含其他元素时，我们称第一个集合为第二个集合的真子集。使用&lt;可以进行判断： 1234&gt;&gt;&gt; a &lt; b False &gt;&gt;&gt; a &lt; a False 超集：超集与子集正好相反（第二个集合的所有元素都出现在第一个集合中），使用 &gt;=或者 issuperset() 可以进行判断： 1234&gt;&gt;&gt; a &gt;= b False &gt;&gt;&gt; a.issuperset(b) False 一个集合是它本身的超集： 1234&gt;&gt;&gt; a &gt;= a True &gt;&gt;&gt; a.issuperset(a) True 真超集:使用&gt;可以找到一个集合的真超集（第一个集合包含第二个集合的所有元素且还包含其他元素）： 12&gt;&gt;&gt; a &gt; b False]]></content>
      <categories>
        <category>计算机</category>
        <category>语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>计算机：语言</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[工作：媒立方采集点数据与天目云采集点差异比较]]></title>
    <url>%2F2019%2F07%2F17%2F%E5%B7%A5%E4%BD%9C%EF%BC%9A%E5%AA%92%E7%AB%8B%E6%96%B9%E9%87%87%E9%9B%86%E7%82%B9%E6%95%B0%E6%8D%AE%E4%B8%8E%E5%A4%A9%E7%9B%AE%E4%BA%91%E9%87%87%E9%9B%86%E7%82%B9%E5%B7%AE%E5%BC%82%E6%AF%94%E8%BE%83%2F</url>
    <content type="text"><![CDATA[请输入密码以阅读这篇私密文章。 Incorrect Password! No content to display! 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]]></content>
  </entry>
  <entry>
    <title><![CDATA[Python：excel处理（xld与xlwt）]]></title>
    <url>%2F2019%2F07%2F16%2FPython%EF%BC%9Aexcel%E5%A4%84%E7%90%86%EF%BC%88xld%E4%B8%8Exlwt%EF%BC%89%2F</url>
    <content type="text"><![CDATA[excel处理工具:xlrd与xlwt xlrd是python语言中读取excel的扩展工具包，可以实现指定表单、指定单元格的读取。 xlwt是python语言中写excel的扩展工具包，可以实现指定表单、指定单元格的写入。 一、xlrd安装使用 pip install xlrd 来安装xlrd模块。 基本操作123456789101112131415161718192021222324252627282930313233343536# 示例：# 导入扩展包import xlrd# 打开Excel文件读取数据data = xlrd.open_workbook('excelFile.xls') [1] # 获取一个工作表table = data.sheets()[0] #通过索引顺序获取table = data.sheet_by_index(0) #通过索引顺序获取table = data.sheet_by_name(u'Sheet1') #通过名称获取# 获取整行和整列的值（数组）table.row_values(i)table.col_values(i)# 获取行数和列数nrows = table.nrowsncols = table.ncols# 循环行列表数据for i in range(nrows ):print table.row_values(i)# 单元格table.cell(rowx,colx)cell_A1 = table.cell(0,0).valuecell_C4 = table.cell(3,2).value# 使用行列索引cell_A1 = table.row(0)[0].valuecell_A2 = table.col(1)[0].value# 简单的写入row = 0col = 0# 常用单元格中的类型 empty,1 string, 2 number, 3 date, 4 boolean, 5 error, 6 blankctype = 1 value = '单元格的值'# 扩展的格式化xf = 0 table.put_cell(row, col, ctype, value, xf)table.cell(0,0) #单元格的值'table.cell(0,0).value #单元格的值' 二、xlwt安装使用 pip install xlwt 来安装xlwt模块。 基本操作12345678910# 导入模块import xlwt# 创建workbook（其实就是excel，后来保存一下就行）workbook = xlwt.Workbook(encoding = 'ascii')# 创建表worksheet = workbook.add_sheet('My Worksheet')# 往单元格内写入内容worksheet.write(0, 0, label = 'Row 0, Column 0 Value')# 保存workbook.save('Excel_Workbook.xls')]]></content>
      <categories>
        <category>计算机</category>
        <category>语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>计算机：语言</tag>
      </tags>
  </entry>
</search>
