<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python学习：Python基础（下）]]></title>
    <url>%2F2019%2F08%2F08%2FPython%E5%AD%A6%E4%B9%A0%EF%BC%9APython%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%8B%EF%BC%89%2F</url>
    <content type="text"><![CDATA[本章将介绍如何组织代码和数据。Python语言是通过代码缩进来区分代码块结构。 #注释与\链接注释是程序中会被Python解释器忽略的一段文本。通过使用注释，可以解释和明确Python代码的功能，记录将来要修改的地方，甚至写下你想写的任何东西。在Python中使用#字符标记注释，从#开始到当前行结束的部分都是注释。 注释#12345&gt;&gt;&gt; # 尽管Python不会喜欢，但是我可以在这里讲任何东西 ... # 因为我被“保护”... # 令人敬畏的#号 ... &gt;&gt;&gt; 程序在合理的长度下是易读的。一行程序的（非强制性）最大长度建议为80个字符。如果你在该长度下写不完你的代码，可以使用连接符\（反斜线）。把它放在一行的结束位置，Python仍然将其解释为同一行。 链接\ 1&gt;&gt;&gt; alphabet = 'abcdefg' + \ ... 'hijklmnop' + \ ... 'qrstuv' + \ ... 'wxyz' Python的条件语句Python条件语句是通过一条或多条语句的执行结果（True或者False）来决定执行的代码块。Python程序语言指定任何非0和非空值为true，0或者 其他空值为false。Python编程中if语句用于控制程序的执行，基本形式为： if使用1234if 判断条件： 执行语句……else： 执行语句…… 其中”判断条件”成立时，则执行后面的语句，而执行内容可以多行，以缩进来区分表示同一范围。else为可选语句，当需要在条件不成立时执行内容则可以执行相关语句。 if 基本用法12345678 flag = Falsename = 'luren'if name == 'python': # 判断变量是否为 python flag = True # 条件成立时设置标志为真 print 'welcome boss' # 并输出欢迎信息else: print name # 条件不成立时输出变量名称 输出结果为： 1luren # 输出结果 当判断条件为多个值时，可以使用if、elif（即 else if）和 else: if`、`elif`（即 `else if`）和 `else`12345678if 判断条件1: 执行语句1……elif 判断条件2: 执行语句2……elif 判断条件3: 执行语句3……else: 执行语句4…… 实例： elif用法123456789101112 num = 5 if num == 3: # 判断num的值 print 'boss' elif num == 2: print 'user'elif num == 1: print 'worker'elif num &lt; 0: # 值小于零时输出 print 'error'else: print 'roadman' # 条件均不成立时输出 输出结果： 1roadman # 输出结果 Python 循环语句使用if、elif和else条件判断的例子是自顶向下执行的，但是有时候我们需要重复一些操作——循环 Python中循环类型循环类型 | 循环描述—|—while循环| 在给定的判断条件为 true 时执行循环体，否则退出循环体。for循环 |重复执行语句嵌套循环|可以在while循环、for循环中相互嵌套 循环控制语句循环控制语句可以更改语句执行的顺序。Python支持以下循环控制语句：控制语句 | 描述—|—break语句 | 在语句块执行过程中终止循环，并且跳出整个循环continue语句 | 在语句块执行过程中终止当前循环，跳出该次循环，执行下一次循环。pass语句 |pass是空语句，是为了保持程序结构的完整性。 while循环Python编程中while语句用于循环执行程序，即在某条件下，循环执行某段程序，以处理需要重复处理的相同任务。其基本形式为： while循环12while 判断条件： 执行语句…… 执行语句可以是单个语句或语句块。判断条件可以是任何表达式，任何非零、或非空的值均为true。当判断条件假false时，循环结束。 while实例123456count = 0while (count &lt; 9): print 'The count is:', count count = count + 1 print "Good bye!" 输出结果： 12345678910The count is: 0The count is: 1The count is: 2The count is: 3The count is: 4The count is: 5The count is: 6The count is: 7The count is: 8Good bye! 跳出循环while语句时还有另外两个重要的命令continue，break 来跳过循环，continue用于跳过该次循环，break则是用于退出循环。 continue 和 break 用法12345678910111213i = 1while 1: # 循环条件为1必定成立 print(i) # 输出1~10 i += 1 if i &gt; 10: # 当i大于10时跳出循环 break i = 1while i &lt; 10: i += 1 if i%2 &gt; 0: # 非双数时跳过输出 continue print(i) # 输出双数2、4、6、8、10 循环使用 else 语句如果while循环正常结束（没有使用break跳出），程序将进入到可选的else段。当你使用循环来遍历检查某一数据结构时，找到满足条件的解使用break跳出；循环结束，即没 有找到可行解时，将执行else部分代码段： while的else语句123456count = 0while count &lt; 5: print count, " is less than 5" count = count + 1else: print count, " is not less than 5" 输出结果： 1234560 is less than 51 is less than 52 is less than 53 is less than 54 is less than 55 is not less than 5 for迭代 Python频繁地使用迭代器。它允许在数据结构长度未知和具体实现未知的情况下遍历整个数据结构，并且支持迭代快速读写中的数据，以及允许不能一次读入计算机内存的数据流 的处理。 Python for循环可以遍历任何序列的项目，如一个列表或者一个字符串。 for迭代实例12345678for letter in 'Python': # 第一个实例 print '当前字母 :', letter fruits = ['banana', 'apple', 'mango']for fruit in fruits: # 第二个实例 print '当前水果 :', fruit print "Good bye!" 输出结果： 12345678910当前字母 : P当前字母 : y当前字母 : t当前字母 : h当前字母 : o当前字母 : n当前水果 : banana当前水果 : apple当前水果 : mangoGood bye! 跳出循环break和continue在for循环中跳出的用法和在while 循环中是一样的。continue用于跳过该次循环，break则是用于退出循环。 循环使用 else 语句类似于while，for循环也可以使用可选的else代码段，用来判断for循环是否正常结束（没有调用break跳出），否则会执行else段。 12345678&gt;&gt;&gt; cheeses = [] &gt;&gt;&gt; for cheese in cheeses: ... print('This shop has some lovely', cheese) ... break ... else: # 没有break表示没有找到奶酪 ... print('This is not much of a cheese shop, is it?') ...This is not much of a cheese shop, is it? 使用zip()并行迭代zip()函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象。如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用 * 号操作符，可以将元组解压为列表。 语法：1zip([iterable, ...]) 参数说明： iterabl – 一个或多个迭代器; 返回值 返回一个对象。 实例 1234567891011121314151617&gt;&gt;&gt;a = [1,2,3]&gt;&gt;&gt; b = [4,5,6]&gt;&gt;&gt; c = [4,5,6,7,8]&gt;&gt;&gt; zipped = zip(a,b) # 返回一个对象&gt;&gt;&gt; zipped&lt;zip object at 0x103abc288&gt;&gt;&gt;&gt; list(zipped) # list() 转换为列表[(1, 4), (2, 5), (3, 6)]&gt;&gt;&gt; list(zip(a,c)) # 元素个数与最短的列表一致[(1, 4), (2, 5), (3, 6)] &gt;&gt;&gt; a1, a2 = zip(*zip(a,b)) #与zip相反，zip(*) 可理解为解压，返回二维矩阵式&gt;&gt;&gt; list(a1)[1, 2, 3]&gt;&gt;&gt; list(a2)[4, 5, 6]&gt;&gt;&gt; 使用range()生成自然数序列range()函数返回在特定区间的自然数序列，不需要创建和存储复杂的数据结构，例如列表或者元组。这允许在不使用计算机全部内存的情况下创建较大的区间，也不会使你的程序崩溃。 函数语法 12range(stop)range(start, stop[, step]) 参数说明： start:计数从start开始。默认是从0开始。例如range（5）等价于range（0， 5）; stop: 计数到stop结束，但不包括stop。例如：range（0， 5）是[0, 1, 2, 3, 4]没有5 step：步长，默认为1。例如：range（0， 5） 等价于range(0, 5, 1) 实例 12345678910&gt;&gt;&gt;list(range(0, 30, 5))[0, 5, 10, 15, 20, 25]&gt;&gt;&gt; list(range(0, 10, 2))[0, 2, 4, 6, 8]&gt;&gt;&gt; list(range(0, -10, -1))[0, -1, -2, -3, -4, -5, -6, -7, -8, -9]&gt;&gt;&gt; list(range(1, 0))[]&gt;&gt;&gt;&gt;&gt;&gt; 推导式 推导式是从一个或者多个迭代器快速简洁地创建数据结构的一种方法。它可以将循环和条件判断结合，从而避免语法冗长的代码。 列表推导式最简单的形式如下所示：[ expression for item in iterable ]实例： 12&gt;&gt;&gt; number_list = [number for number in range(1,6)] &gt;&gt;&gt; number_list [1, 2, 3, 4, 5] 在第一行中，第一个number变量为列表生成值，也就是说，把循环的结果放在列表number_list中。第二个number为循环变量。其中第一个number可以为表达式: 12&gt;&gt;&gt; number_list = [number-1 for number in range(1,6)] &gt;&gt;&gt; number_list [0, 1, 2, 3, 4] 列表推导也可以像下面的例子加上条件表达式：[expression for item in iterable if condition] 123&gt;&gt;&gt; a_list = [number for number in range(1,6) if number % 2 == 1] &gt;&gt;&gt; a_list [1, 3, 5] 正如存在很多嵌套循环一样，在对应的推导中会有多个for语句,推导式也可以嵌套循环。 123456789101112&gt;&gt;&gt; rows = range(1,4) &gt;&gt;&gt; cols = range(1,3) &gt;&gt;&gt; cells = [(row, col) for row in rows for col in cols] &gt;&gt;&gt; for cell in cells: ... print(cell) ... (1, 1) (1, 2) (2, 1)(2, 2) (3, 1)(3, 2) 字典推导式与列表的推导式类似，其中最简单的例子就像：{ key_expression : value_expression for expression in iterable } 1234&gt;&gt;&gt; word = 'letters' &gt;&gt;&gt; letter_counts = &#123;letter: word.count(letter) for letter in set(word)&#125; &gt;&gt;&gt; letter_counts &#123;'t': 2, 'l': 1, 'e': 2, 'r': 1, 's': 1&#125; 集合推导式集合也不例外，同样有推导式。最简单的版本和之前的列表、字典推导类似：{expression for expression in iterable }最长的版本（if tests, multiple for clauses）对于集合而言也是可行的： 123&gt;&gt;&gt; a_set = &#123;number for number in range(1,6) if number % 3 == 1&#125; &gt;&gt;&gt; a_set &#123;1, 4&#125; 生成器推导式1&gt;&gt;&gt; number_thing = (number for number in range(1, 6)) 其实，圆括号之间的是生成器推导式，它返回的是一个生成器对象： 12&gt;&gt;&gt; type(number_thing) &lt;class 'generotor'&gt; 。一个生成器只能运行一次。列表、集合、字符串和字典都存储在内存中，但是生成器仅在运行中产生值，不会被存下来，所以不能重新使用或者备份一个生成器。如果想再一次迭代此生成器，会发现它被擦除了。生成器既可以通过生成器推导式创建生成器，也可以使用生成器的函数 123&gt;&gt;&gt; try_again = list(number_thing) &gt;&gt;&gt; try_again [] 函数 函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。函数能提高应用的模块性，和代码的重复利用率。Python提供了许多内建函数，比如print()。但也可以自己创建函数，这被叫做用户自定义函数 定义一个函数可以定义一个由自己想要功能的函数，以下是简单的规则： 函数代码块以def关键词开头，后接函数标识符名称和圆括号 ()。 任何传入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数。 函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。 函数内容以冒号起始，并且缩进。 return [表达式]结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。 语法Python定义函数使用def关键字，一般格式如下： 12def 函数名（参数列表）: 函数体 默认情况下，参数值和参数名称是按函数声明中定义的顺序匹配起来的。实例： 1234567891011# 计算面积函数def area(width, height): return width * height def print_welcome(name): print("Welcome", name) print_welcome("Runoob")w = 4h = 5print("width =", w, " height =", h, " area =", area(w, h)) 运行结果： 12Welcome Runoobwidth = 4 height = 5 area = 20 参数传递在python中，类型属于对象，变量是没有类型的： 123a=[1,2,3]a="Runoob" 以上代码中，[1,2,3] 是List类型，&quot;Runoob&quot;是String类型，而变量a是没有类型，她仅仅是一个对象的引用（一个指针），可以是指向 List 类型对象，也可以是指向 String 类型对象。 可更改(mutable)与不可更改(immutable)对象在python中，strings, tuples, 和numbers是不可更改的对象，而list,dict等则是可以修改的对象。可变类型：变量赋值la=[1,2,3,4]后再赋值la[2]=5则是将list la的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。 python函数的参数传递：不可变类型：类似c++的值传递，如整数、字符串、元组。如fun（a），传递的只是a的值，没有影响a对象本身。比如在fun（a）内部修改a的值，只是修改另一个复制的对象，不会影响a本身。 可变类型：类似c++的引用传递，如列表，字典。如fun（la），则是将la真正的传过去，修改后fun外部的la也会受影响。 python中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。 python 传不可变对象实例 1234567 def ChangeInt( a ): a = 10 b = 2ChangeInt(b)print( b ) # 结果是 2 实例中有int对象2，指向它的变量是b，在传递给ChangeInt函数时，按传值的方式复制了变量b，a和b都指向了同一个Int对象，在a=10时，则新生成一个int值对象10，并让a指向它。 传可变对象实例可变对象在函数里修改了参数，那么在调用这个函数的函数里，原始的参数也被改变了。例如： 123456789101112 # 可写函数说明def changeme( mylist ): "修改传入的列表" mylist.append([1,2,3,4]) print ("函数内取值: ", mylist) return # 调用changeme函数mylist = [10,20,30]changeme( mylist )print ("函数外取值: ", mylist) 传入函数的和在末尾添加新内容的对象用的是同一个引用。故输出结果如下： 12函数内取值: [10, 20, 30, [1, 2, 3, 4]]函数外取值: [10, 20, 30, [1, 2, 3, 4]] 参数以下是调用函数时可使用的正式参数类型： 必需参数 关键字参数 默认参数 不定长参数 必需参数必需参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。 调用printme()函数，你必须传入一个参数，不然会出现语法错误： 123456789 #可写函数说明def printme( str ): "打印任何传入的字符串" print (str) return # 调用 printme 函数，不加参数会报错printme() 以上实例输出结果： 1234Traceback (most recent call last): File "test.py", line 10, in &lt;module&gt; printme()TypeError: printme() missing 1 required positional argument: 'str' 关键字参数关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。 使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为Python解释器能够用参数名匹配参数值。 以下实例在函数printme()调用时使用参数名： 123456789 #可写函数说明def printme( str ): "打印任何传入的字符串" print (str) return #调用printme函数printme( str = "cyy") 以上实例输出结果： 1cyy 以下实例中演示了函数参数的使用不需要使用指定顺序： 123456789#可写函数说明def printinfo( name, age ): "打印任何传入的字符串" print ("名字: ", name) print ("年龄: ", age) return #调用printinfo函数printinfo( age=50, name="runoob" ) 以上实例输出结果： 12名字: runoob年龄: 50 默认参数调用函数时，如果没有传递参数，则会使用默认参数。以下实例中如果没有传入age参数，则使用默认值： 123456789101112 #可写函数说明def printinfo( name, age = 35 ): "打印任何传入的字符串" print ("名字: ", name) print ("年龄: ", age) return #调用printinfo函数printinfo( age=50, name="runoob" )print ("------------------------")printinfo( name="runoob" ) 以上实例输出结果： 12345名字: runoob年龄: 50------------------------名字: runoob年龄: 35 不定长参数你可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，和上述2种参数不同，声明时不会命名。基本语法如下： 1234def functionname([formal_args,] *var_args_tuple ): "函数_文档字符串" function_suite return [expression] 加了星号*的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。 12345678910 # 可写函数说明def printinfo( arg1, *vartuple ): "打印任何传入的参数" print ("输出: ") print (arg1) print (vartuple) # 调用printinfo 函数printinfo( 70, 60, 50 ) 以上实例输出结果： 123输出: 70(60, 50) 如果在函数调用时没有指定参数，它就是一个空元组。我们也可以不向函数传递未命名的变量。如下实例： 123456789101112# 可写函数说明def printinfo( arg1, *vartuple ): "打印任何传入的参数" print ("输出: ") print (arg1) for var in vartuple: print (var) return # 调用printinfo 函数printinfo( 10 )printinfo( 70, 60, 50 ) 以上实例输出结果： 123456输出:10输出:706050 还有一种就是参数带两个星号**基本语法如下： 1234def functionname([formal_args,] **var_args_dict ): "函数_文档字符串" function_suite return [expression] 加了两个星号 **的参数会以字典的形式导入。 12345678910 # 可写函数说明def printinfo( arg1, **vardict ): "打印任何传入的参数" print ("输出: ") print (arg1) print (vardict) # 调用printinfo 函数printinfo(1, a=2,b=3) 以上实例输出结果： 123输出: 1&#123;'a': 2, 'b': 3&#125; 声明函数时，参数中星号* 可以单独出现，例如: 12def f(a,b,*,c): return a+b+c 如果单独出现星号*后的参数必须用关键字传入。 12345678910&gt;&gt;&gt; def f(a,b,*,c):... return a+b+c... &gt;&gt;&gt; f(1,2,3) # 报错Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt;TypeError: f() takes 2 positional arguments but 3 were given&gt;&gt;&gt; f(1,2,c=3) # 正常6&gt;&gt;&gt; 文档字符串程序的可读性很重要。建议在函数体开始的部分附上函数定义说明的文档，这就是函数的文档字符串： 123&gt;&gt;&gt; def echo(anything): ... 'echo returns its input argument' ... return anything 可以定义非常长的文档字符串，加上详细的规范说明，如下所示： 123456789def print_if_true(thing, check): ''' Prints the first argument if a second argument is true. The operation is: 1. Check whether the *second* argument is true. 2. If it is, print the *first* argument. ''' if check: print(thing) 调用Python函数help()可以打印输出一个函数的文档字符串。把函数名传入函数help()就会得到参数列表和规范的文档： 1234&gt;&gt;&gt; help(echo) Help on function echo in module __main__: echo(anything) echo returns its input argument 如果仅仅想得到文档字符串： 12&gt;&gt;&gt; print(echo.__doc__) echo returns its input argument 内部函数在Python中，可以在函数中定义另外一个函数： 12345678&gt;&gt;&gt; def outer(a, b): ... def inner(c, d): ... return c + d ... return inner(a, b) ... &gt;&gt;&gt; &gt;&gt;&gt; outer(4, 7) 11 当需要在函数内部多次执行复杂的任务时，内部函数是非常有用的，从而避免了循环和代码的堆叠重复。 支持类型提示python是一门动态语言，而动态语言的变量类型极其灵活，使其在做一些工具，脚本时非常方便，但是同时也给大型项目的开发带来了一些麻烦，比如过一阵子就不知道这个变量啥类型的了，而且IDE还不容易识别你的变量类型，使用.的时候不会自动提示等。自python3.5开始，PEP484为python引入了类型注解(type hints)。 例子： 12def greeting(name: str) -&gt; str: return 'Hello ' + name 在函数参数的后面用冒号加类型就可以声明该参数的类型，-&gt;代表了函数返回值的类型。 闭包内部函数可以看作一个闭包。闭包是一个可以由另一个函数动态生成的函数，并且可以改变和存储函数外创建的变量的值。以下面的例子knights()为基础。现在，调用新的函数knight2()，把inner()函数变成一个叫inner2()的闭包。可以看出有以下不同点。 inner2()直接使用外部的saying参数，而不是通过另外一个参数获取。 knights2()返回值为inner2函数，而不是调用它。12345678910111213&gt;&gt;&gt; def knights(saying): ... def inner(quote): ... return "We are the knights who say: '%s'" % quote ... return inner(saying) ... &gt;&gt;&gt; knights('Ni!') "We are the knights who say: 'Ni!'"&gt;&gt;&gt; def knights2(saying): ... def inner2(): ... return "We are the knights who say: '%s'" % saying ... return inner2 ... inner2()函数可以得到saying参数的值并且记录下来。return inner2这一行返回的是inner2函数的复制（没有直接调用）。所以它就是一个闭包：一个被动态创建的可以记录 外部变量的函数。用不同的参数调用knights2()两次： 12&gt;&gt;&gt; a = knights2('Duck') &gt;&gt;&gt; b = knights2('Hasenpfeffer') 那么a和b会是什么类型？ 1234&gt;&gt;&gt; type(a) &lt;class 'function'&gt; &gt;&gt;&gt; type(b) &lt;class 'function'&gt; 它们是函数，同时也是闭包： 1234&gt;&gt;&gt; a &lt;function knights2.&lt;locals&gt;.inner2 at 0x10193e158&gt; &gt;&gt;&gt; b &lt;function knights2.&lt;locals&gt;.inner2 at 0x10193e1e0&gt; 如果调用它们，它们会记录被knights2函数创建时的外部变量saying： 1234&gt;&gt;&gt; a() "We are the knights who say: 'Duck'" &gt;&gt;&gt; b() "We are the knights who say: 'Hasenpfeffer'" 匿名函数：lambda()函数Python中，lambda函数是用一个语句表达的匿名函数。可以用它来代替小的函数。首先，举一个使用普通函数的例子。定义函数edit_story()，参数列表如下所示： words——单词列表 func——遍历列表中单词的函数123&gt;&gt;&gt; def edit_story(words, func): ... for word in words: ... print(func(word)) 现在，需要一个单词列表和一个遍历单词的函数。对于单词，可以选择我的猫从某一台阶上掉下时发出的声音： 1&gt;&gt;&gt; stairs = ['thud', 'meow', 'thud', 'hiss'] 对于函数，它要将每个单词的首字母变为大写，然后在末尾加上感叹号 , 用作猫画报的标题非常完美： 123&gt;&gt;&gt; def enliven(word): # 让这些单词更有情感 ... return word.capitalize() + '!' 混合这些“配料”： 12345&gt;&gt;&gt; edit_story(stairs, enliven) Thud! Meow! Thud! Hiss! 最后，到了lambda。enliven() 函数可以简洁地用下面的一个lambda代替： 1234567&gt;&gt;&gt; &gt;&gt;&gt; edit_story(stairs, lambda word: word.capitalize() + '!') Thud! Meow! Thud! Hiss! &gt;&gt;&gt; lambda函数接收一个参数word。在冒号和末尾圆括号之间的部分为函数的定义。通常，使用实际的函数（例如enliven()）会比使用lambda更清晰明了。但是，当需要定义很多小的函数以及记住它们的名字时，lambda会非常有用。尤其是在图形用户界面中，可以使用lambda来定义回调函数。 lambda函数的使用当我们在短时间内需要一个无名称函数时，我们使用lambda函数。 在Python中，我们通常将它用作高阶函数（接受其他函数作为参数的函数）的参数。lambda函数与内置函数一起使用，如filter（）、map（）等。 与filter()一起使用python中的filter（）函数接受一个函数和一个列表作为参数。 使用列表中的所有项调用函数，并返回一个新的列表，其中包含函数为其值为true的项。 下面是一个使用filter（）函数的示例，它只从列表中过滤偶数。 123456my_list = [1, 5, 4, 6, 8, 11, 3, 12]new_list = list(filter(lambda x: (x%2 == 0) , my_list))# Output: [4, 6, 8, 12]new_list 输出 1[4, 6, 8, 12] filter创建一个元素列表，函数为其返回true。 该filter类似于for循环，但它是一个内置函数，速度更快。 123number_list = range(-5, 5)less_than_zero = list(filter(lambda x: x &lt; 0, number_list))less_than_zero 输出 1[-5, -4, -3, -2, -1] 与map()一起使用map将一个函数应用于输入列表中的所有项。 map(function_to_apply, list_of_inputs) 大多数情况下，我们希望将所有列表元素逐个传递给函数，然后收集输出。例如： 12345items = [1, 2, 3, 4, 5]squared = []for i in items: squared.append(i**2)squared 输出 1[1, 4, 9, 16, 25] 123items = [1, 2, 3, 4, 5]squared = list(map(lambda x: x**2, items))squared 输出 1[1, 4, 9, 16, 25] 大多数时候，我们在让lambda()和map()一起使用 我们甚至可以拥有一个函数列表，而不是一个输入列表！ 123456789def multiply(x): return (x*x)def add(x): return (x+x)funcs = [add, multiply]for i in range(5): value = list(map(lambda x: x(i), funcs)) print(value) 输出 12345[0, 0][2, 1][4, 4][6, 9][8, 16] 与reduce()一起使用函数reduce（func，seq）继续将函数func（）应用于序列seq。它返回单个值。 如果seq=[s1，s2，s3，…，sn]，调用reduce（func，seq）的工作方式如下： 首先，seq的前两个元素将应用于func，即func（s1，s2），reduce（）工作的列表现在如下所示：[func（s1，s2），s3，…，Sn]在下一步中，func将应用于上一个结果和列表的第三个元素，即func（func（s1，s2），s3），列表现在如下所示：【func（func（s1，s2），s3，……，Sn] 这样继续，直到只剩下一个元素，并作为reduce（）的结果返回该元素 12from functools import reducereduce(lambda x,y: x+y, [47,11,42,13]) 输出 1113 使用reduce确定数值列表的最大值： 12f = lambda a,b: a if (a &gt; b) else breduce(f, [47,11,42,102,13]) 输出 1102 生成器生成器是用来创建Python序列的一个对象。使用它可以迭代庞大的序列，且不需要在内存中创建和存储整个序列。通常，生成器是为迭代器产生数据的。回想起来，我们已经在之前的例子中使用过其中一个，即range()，来产生一系列整数。range()在 Python 2中返回一个列表，这也限制了它要进入内存空间。Python 2中同样存在的生成器xrange()在 Python 3中成为标准的range()生成器。这个例子累加从 1 到 100 的整数： 12&gt;&gt;&gt; sum(range(1, 101)) 5050 每次迭代生成器时，它会记录上一次调用的位置，并且返回下一个值。这一点和普通的函数是不一样的，一般函数都不记录前一次调用，而且都会在函数的第一行开始执行。如果你想创建一个比较大的序列，使用生成器推导的代码会很长，这时可以尝试写一个生成器函数。生成器函数和普通函数类似，但是它的返回值使用 yield语句声明而不是return。下面编写我们自己的range()函数版本： 12345&gt;&gt;&gt; def my_range(first=0, last=10, step=1): ... number = first ... while number &lt; last: ... yield number ... number += step ... 这是一个普通的函数： 12&gt;&gt;&gt; my_range &lt;function my_range at 0x10193e268&gt; 并且它返回的是一个生成器对象： 123&gt;&gt;&gt; ranger = my_range(1, 5) &gt;&gt;&gt; ranger &lt;generator object my_range at 0x101a0a168&gt; 可以对这个生成器对象进行迭代： 1234567&gt;&gt;&gt; for x in ranger:... print(x) ... 1 2 34 装饰器有时你需要在不改变源代码的情况下修改已经存在的函数。常见的例子是增加一句调试声明，以查看传入的参数。装饰器实质上是一个函数。它把一个函数作为输入并且返回另外一个函数。在装饰器中，通常使用下面这些Python技巧： args 和 *kwargs 闭包 作为参数的函数 函数document_it()定义了一个装饰器，会实现如下功能： 打印输出函数的名字和参数的值 执行含有参数的函数 打印输出结果 返回修改后的函数 看下面的代码： 123456789&gt;&gt;&gt; def document_it(func): ... def new_function(*args, **kwargs): ... print('Running function:', func.__name__) ... print('Positional arguments:', args) ... print('Keyword arguments:', kwargs) ... result = func(*args, **kwargs) ... print('Result:', result) ... return result ... return new_function 无论传入document_it()的函数func是什么，装饰器都会返回一个新的函数，其中包含函数document_it() 增加的额外语句。实际上，装饰器并不需要执行函数func中的代码，只是在结束前函数document_it()调用函数func以便得到func的返回结果和附加代码的结果。 那么，如何使用装饰器？当然，可以通过人工赋值： 123456789101112&gt;&gt;&gt; def add_ints(a, b): ... return a + b ... &gt;&gt;&gt; add_ints(3, 5) 8 &gt;&gt;&gt; cooler_add_ints = document_it(add_ints) # 人工对装饰器赋值 &gt;&gt;&gt; cooler_add_ints(3, 5) Running function: add_ints Postitional arguments: （3， 5）Keyword arguments: &#123;&#125; Result: 8 8 作为对前面人工装饰器赋值的替代，可以直接在要装饰的函数前添加装饰器名字@decorator_name： 123456789&gt;&gt;&gt; @document_it ... def add_ints(a, b): ... return a + b ... &gt;&gt;&gt; add_ints(3, 5) Start function add_ints Positional arguments: (3, 5) Keyword arguments: &#123;&#125; Result: 8 8 同样一个函数可以有多个装饰器。下面，我们写一个对结果求平方的装饰器square_it()： 123456&gt;&gt;&gt; def square_it(func): ... def new_function(*args, **kwargs): ... result = func(*args, **kwargs) ... return result * result ... return new_function ... 靠近函数定义（def上面）的装饰器最先执行，然后依次执行上面的。任何顺序都会得到相同的最终结果。下面的例子中会看到中间步骤的变化： 1234567891011&gt;&gt;&gt; @document_it ... @square_it ... def add_ints(a, b): ... return a + b ... &gt;&gt;&gt; add_ints(3, 5) Running function: new_function Positional arguments: (3, 5) Keyword arguments: &#123;&#125; Result: 64 64 交换两个装饰器的顺序： 1234567891011&gt;&gt;&gt; @square_it ... @document_it ... def add_ints(a, b): ... return a + b ... &gt;&gt;&gt; add_ints(3, 5) Running function: add_ints Positional arguments: (3, 5) Keyword arguments: &#123;&#125; Result: 8 64 命名空间和作用域一个名称在不同的使用情况下可能指代不同的事物。Python程序有各种各样的命名空间，它指的是在该程序段内一个特定的名称是独一无二的，它和其他同名的命名空间是无关的。 每一个函数定义自己的命名空间。如果在主程序（main）中定义一个变量x，在另外一个函数中也定义 x 变量，两者指代的是不同的变量。但是，天下也没有完全绝对的事情，需要的话，可以通过多种方式获取其他命名空间的名称。 每个程序的主要部分定义了全局命名空间。因此，在这个命名空间的变量是全局变量。 你可以在一个函数内得到某个全局变量的值： 1234567&gt;&gt;&gt; animal = 'fruitbat' &gt;&gt;&gt; def print_global(): ... print('inside print_global:', animal) ... &gt;&gt;&gt; print('at the top level:', animal) at the top level: fruitbat &gt;&gt;&gt; print_global() inside print_global: fruitbat 但是，如果想在函数中得到一个全局变量的值并且改变它，会报错： 1234567&gt;&gt;&gt; def change_and_print_global(): ... print('inside change_and_print_global:', animal) ... animal = 'wombat' ... print('after the change:', animal) ... &gt;&gt;&gt; change_and_print_global() Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; File "&lt;stdin&gt;", line 2, in change_and_report_it UnboundLocalError: local variable 'animal' referenced before assignment 实际上，你改变的另外一个同样被命名为animal 的变量，只不过这个变量在函数内部： 12345678910&gt;&gt;&gt; def change_local(): ... animal = 'wombat' ... print('inside change_local:', animal, id(animal)) ... &gt;&gt;&gt; change_local() inside change_local: wombat 4330406160 &gt;&gt;&gt; animal 'fruitbat' &gt;&gt;&gt; id(animal) 4330390832 这里发生了什么？在函数第一行将字符串fruitbat 赋值给全局变量animal。函数change_ local() 也有一个叫作animal的变量。不同的是，它在自己的局部命名空间。 我们使用Python内嵌函数id()打印输出每个对象的唯一的 ID 值，证明在函数change_ local() 中的变量animal和主程序中的animal不是同一个。 为了读取全局变量而不是函数中的局部变量，需要在变量前面显式地加关键字global）： 123456789101112&gt;&gt;&gt; animal = 'fruitbat' &gt;&gt;&gt; def change_and_print_global(): ... global animal ... animal = 'wombat' ... print('inside change_and_print_global:', animal) ... &gt;&gt;&gt; animal 'fruitbat' &gt;&gt;&gt; change_and_print_global() inside change_and_print_global: wombat &gt;&gt;&gt; animal 'wombat' 如果在函数中不声明关键字global，Python会使用局部命名空间，同时变量也是局部的。函数执行后回到原来的命名空间。Python提供了两个获取命名空间内容的函数： locals()返回一个局部命名空间内容的字典； globals()返回一个全局命名空间内容的字典。下面是它们的实例：12345678910111213141516&gt;&gt;&gt; animal = 'fruitbat' &gt;&gt;&gt; def change_local(): ... animal = 'wombat' #局部变量 ... print('locals:',locals()) ... &gt;&gt;&gt; animal 'fruitbat' &gt;&gt;&gt; change_local() locals: &#123;'animal':'wombat'&#125; &gt;&gt;&gt; print('globals:', globals()) #表示时格式稍微发生变化 globals:&#123;'animal': 'fruitbat', '__doc__': None, 'change_local': &lt;function change_it at 0x1006c0170&gt;, '__package__': None, '__name__': '__main__', '__loader__': &lt;class '_frozen_importlib.BuiltinImporter'&gt;, '__builtins__': &lt;module 'builtins'&gt;&#125; &gt;&gt;&gt; animal 'fruitbat' 函数change_local()的局部命名空间只含有局部变量animal。全局命名空间含有全局变量animal 以及其他一些东西。 名称中_和__的用法以两个下划线__开头和结束的名称都是Python的保留用法。因此，在自定义的变量中不能使用它们。选择这种命名模式是考虑到开发者一般是不会选择它们作为自己的变量的。 例如，一个函数的名称是系统变量function.__name__，它的文档字符串是function.__ doc__： 12345678&gt;&gt;&gt; def amazing(): ... '''This is the amazing function. ... Want to see it again?''' ... print('This function is named:', amazing.__name__) ... print('And its docstring is:', amazing.__doc__) ... &gt;&gt;&gt; amazing() This function is named: amazing And its docstring is: This is the amazing function. Want to see it again? 如同之前globals的输出结果所示，主程序被赋值特殊的名字__main__。 使用try和except处理错误在一些编程语言中，错误是通过特殊的函数返回值指出的，而Python使用异常，它是一段只有错误发生时执行的代码。 之前已经接触到一些有关错误的例子，例如读取列表或者元组的越界位置或者字典中不存在的键。所以，当你执行可能出错的代码时，需要适当的异常处理程序用于阻止潜在的错误发生。 在异常可能发生的地方添加异常处理程序，对于用户明确错误是一种好方法。即使不会及时解决问题，至少会记录运行环境并且停止程序执行。如果发生在某些函数中的异常不能被立刻捕捉，它会持续，直到被某个调用函数的异常处理程序所捕捉。在你不能提供自己的异常捕获代码时，Python会输出错误消息和关于错误发生处的信息，然后终止程序，例如下面的代码段： 12345&gt;&gt;&gt; short_list = [1, 2, 3] &gt;&gt;&gt; position = 5 &gt;&gt;&gt; short_list[position] Traceback (most recent call last):File "&lt;stdin&gt;", line 1, in &lt;module&gt; IndexError: list index out of range 与其让错误随机产生，不如使用try和except提供错误处理程序： 123456789&gt;&gt;&gt; short_list = [1, 2, 3] &gt;&gt;&gt; position = 5 &gt;&gt;&gt; try: ... short_list[position] ... except: ... print('Need a position between 0 and', len(short_list)-1, ' but got', ... position) ... Need a position between 0 and 2 but got 5 在try中的代码块会被执行。如果存在错误，就会抛出异常，然后执行except中的代码；否则，跳过except块代码。像前面那样指定一个无参数的 except适用于任何异常类型。如果可能发生多种类型的异常，最好是分开进行异常处理。当然，没人强迫你这么做，你可以使一个except去捕捉所 有的异常，但是这样的处理方式会比较泛化（类似于直接输出发生了一个错误）。当然也可以使用任意数量的异常处理程序。 有时需要除了异常类型以外其他的异常细节，可以使用下面的格式获取整个异常对象：except exceptiontype as name 下面的例子首先会寻找是否有IndexError，因为它是由索引一个序列的非法位置抛出的异常类型。将一个IndexError异常赋给变量err，把其他的异常赋给变量other。示例中会输出所有存储在other中的该对象的异常。 12345678910111213141516171819202122232425&gt;&gt;&gt; short_list = [1, 2, 3] &gt;&gt;&gt; while True: ... value = input('Position [q to quit]? ') ... if value == 'q': ... break ... try: ... position = int(value) ... print(short_list[position]) ... except IndexError as err: ... print('Bad index:', position) ... except Exception as other: ... print('Something else broke:', other) ... Position [q to quit]? 1 2 Position [q to quit]? 0 1 Position [q to quit]? 2 3 Position [q to quit]? 3 Bad index: 3 Position [q to quit]? 2 3 Position [q to quit]? twoSomething else broke: invalid literal for int() with base 10: 'two' Position [q to quit]? q 输入 3 会抛出异常IndexError；输入two会使函数int()抛出异常，被第二个except所捕获。 编写自己的异常前面一节讨论了异常处理，但是其中讲到的所有异常（例如IndexError）都是在Python或者它的标准库中提前定义好的。根据自己的目的可以使用任意的异常类型，同时也可以自己定义异常类型,用来处理程序中可能会出现的特殊情况。 这里需要定义一个类的新对象。一个异常是一个类，即类Exception的一个子类。现在编写异常UppercaseException，在一个字符串中碰到大写字母会被抛出。 123456789&gt;&gt;&gt; class UppercaseException(Exception): ... pass ... &gt;&gt;&gt; words = ['eeenie', 'meenie', 'miny', 'MO'] &gt;&gt;&gt; for word in words: ... if word.isupper(): ... raise UppercaseException(word) ... Traceback (most recent call last): File "&lt;stdin&gt;", line 3, in &lt;module&gt; __main__.UppercaseException: MO 即使没有定义UppercaseException的行为（注意到只使用pass），也可以通过继承其父类Exception在抛出异常时输出错误提示。 你当然能够访问异常对象本身，并且输出它： 123456&gt;&gt;&gt; try: ... raise OopsException('panic') ... except OopsException as exc: ... print(exc) ... panic]]></content>
      <categories>
        <category>计算机</category>
        <category>语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>计算机：语言</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[工作：天目云网站采集点增删改操作后的数据复查]]></title>
    <url>%2F2019%2F08%2F05%2F%E5%B7%A5%E4%BD%9C%EF%BC%9A%E5%A4%A9%E7%9B%AE%E4%BA%91%E7%BD%91%E7%AB%99%E9%87%87%E9%9B%86%E7%82%B9%E5%A2%9E%E5%88%A0%E6%94%B9%E6%93%8D%E4%BD%9C%E5%90%8E%E7%9A%84%E6%95%B0%E6%8D%AE%E5%A4%8D%E6%9F%A5%2F</url>
    <content type="text"><![CDATA[请输入密码以阅读这篇私密文章。 Incorrect Password! No content to display! ]]></content>
  </entry>
  <entry>
    <title><![CDATA[Mermaid]]></title>
    <url>%2F2019%2F08%2F05%2FMermaid%2F</url>
    <content type="text"><![CDATA[Mermaid Mermaid是一款开源的画流程图、甘特图、时序图工具，她提供了一种类似markdown的语法来创建各种图。 官网：Mermaid 基本用法：Mermaid基本语法 在线编辑器：在线编辑器 NexT-Mermaid设置next/_config.yml123456789# Mermaid tagmermaid: enable: true # Available themes: default | dark | forest | neutral theme: forest # Use 8.0.0 as default, jsdelivr as default CDN, works everywhere even in China cdn: //cdn.jsdelivr.net/npm/mermaid@8.0.0/dist/mermaid.min.js # CDNJS, provided by cloudflare, maybe the best CDN, but not works in China #cdn: //cdnjs.cloudflare.com/ajax/libs/mermaid/8.0.0/mermaid.min.js 使用mermaid.js1234&#123;% mermaid type %&#125;&#123;% endmermaid %&#125;type : mermaid chart的类型 实例流程图 书写 123456&#123;% mermaid graph TD %&#125;A--&gt;B;A--&gt;C;B--&gt;D;C--&gt;D;&#123;% endmermaid %&#125; 显示： graph TD A-->B; A-->C; B-->D; C-->D; 时序图 书写 1234567891011121314151617181920212223&#123;% mermaid sequenceDiagram %&#125;participant Aliceparticipant Bobparticipant John as John&lt;br/&gt;Second LineAlice -&gt;&gt; Bob: Hello Bob, how are you?Bob--&gt;&gt;John: How about you John?Bob--x Alice: I am good thanks!Bob-x John: I am good thanks!Note right of John: Bob thinks a long&lt;br/&gt;long time, so long&lt;br/&gt;that the text does&lt;br/&gt;not fit on a row.Bob--&gt;Alice: Checking with John...alt either thisAlice-&gt;&gt;John: Yeselse or thisAlice-&gt;&gt;John: Noelse or this will happenAlice-&gt;John: Maybeendpar this happens in parallelAlice --&gt;&gt; Bob: Parallel message 1andAlice --&gt;&gt; John: Parallel message 2end&#123;% endmermaid %&#125; 显示 sequenceDiagram participant Alice participant Bob participant John as JohnSecond Line Alice ->> Bob: Hello Bob, how are you? Bob-->>John: How about you John? Bob--x Alice: I am good thanks! Bob-x John: I am good thanks! Note right of John: Bob thinks a longlong time, so longthat the text doesnot fit on a row. Bob-->Alice: Checking with John... alt either this Alice->>John: Yes else or this Alice->>John: No else or this will happen Alice->John: Maybe end par this happens in parallel Alice -->> Bob: Parallel message 1 and Alice -->> John: Parallel message 2 end 甘特图 书写 1234567891011121314151617181920212223242526272829&#123;% mermaid gantt %&#125;dateFormat YYYY-MM-DDaxisFormat %d/%mtitle Adding GANTT diagram to mermaidsection A sectionCompleted task :done, des1, 2014-01-06,2014-01-08Active task :active, des2, 2014-01-09, 3dFuture task : des3, after des2, 5dFuture task2 : des4, after des3, 5dsection Critical tasksCompleted task in the critical line :crit, done, 2014-01-06,24hImplement parser and jison :crit, done, after des1, 2dCreate tests for parser :crit, active, 3dFuture task in critical line :crit, 5dCreate tests for renderer :2dAdd to mermaid :1dsection DocumentationDescribe gantt syntax :active, a1, after des1, 3dAdd gantt diagram to demo page :after a1 , 20hAdd another diagram to demo page :doc1, after a1 , 48hsection Last sectionDescribe gantt syntax :after doc1, 3dAdd gantt diagram to demo page : 20hAdd another diagram to demo page : 48h&#123;% endmermaid %&#125; 显示 gantt dateFormat YYYY-MM-DD axisFormat %d/%m title Adding GANTT diagram to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d section Documentation Describe gantt syntax :active, a1, after des1, 3d Add gantt diagram to demo page :after a1 , 20h Add another diagram to demo page :doc1, after a1 , 48h section Last section Describe gantt syntax :after doc1, 3d Add gantt diagram to demo page : 20h Add another diagram to demo page : 48h git分支图 书写 1234567891011121314151617&#123;% mermaid gitGraph: %&#125;options&#123; "nodeSpacing": 150, "nodeRadius": 10&#125;endcommitbranch newbranchcheckout newbranchcommitcommitcheckout mastercommitcommitmerge newbranch&#123;% endmermaid %&#125; 显示 gitGraph: options { "nodeSpacing": 150, "nodeRadius": 10 } end commit branch newbranch checkout newbranch commit commit checkout master commit commit merge newbranch 参考链接Mermaid]]></content>
      <categories>
        <category>前端</category>
        <category>Hexo</category>
        <category>NexT</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019年7月-12月学习计划]]></title>
    <url>%2F2019%2F08%2F02%2F2019%E5%B9%B47%E6%9C%88-12%E6%9C%88%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92%2F</url>
    <content type="text"><![CDATA[gantt dateFormat YYYY-MM-DD title 2019年7月-12月学习计划 section 7/19-8/22 Python和MySQL:2019-07-19, 34d section 8/23-9/28 数据结构与算法基础: 2019-08-23, 36d section 9/28-11/17 数据分析: 2019-09-28, 50d section 11/18-12/31 web开发: 2019-11-18, 43d]]></content>
      <categories>
        <category>计划</category>
      </categories>
      <tags>
        <tag>计划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Excel函数]]></title>
    <url>%2F2019%2F08%2F01%2FExcel%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[Left()与LeftB():含截取到倒数指定字符如果要从左边开始截取字符，在Excel中，可以用Left()和；其中Left()是按字符个数截取，LeftB()是按字节个数截取；它们的区别在于，Left()把每个汉字算一个字符，而 LeftB()把每个汉字算两个字节；每个数字和字母，它们都算一个。 语法 Left() 表达式：LEFT(text, [Num_Chars]) 中文表达式：LEFT(文本, [截取字符个数]) LeftB() 表达式：LEFTB(text, [Num_Bytes]) 中文表达式：LEFTB(文本, [截取字节个数]) 说明： Num_Chars为可选项，若省略，则默认截取一个字符。Num_Bytes也为可选项，若省略，则默认截取一个字节。 Num_Chars必须大于等于0，如果Num_Chars大于文本长度，则返回所有文本。Num_Bytes也必须大于等于0；若文本全是中文，Num_Bytes大于等于文本长度的两倍，则返回把有文本；若文本由字母或数字组成，Num_Bytes大于等于文本长度，则返回所有文本。 使用方法及实例 Left() 假如要截取3个汉字。选中E2单元格，输入公式=LEFT(B2,3)，按回车，返回“蝴蝶结”三个字，操作过程步骤，如下图所示： LeftB() 把公式=LEFTB(A1,5)复制到B2单元格，按回车，则返回Excel；双击B2，把公式改为=LEFTB(A1,10)，按回车，则返回“Excel 2016”；操作过程步骤，如下图所示： 从两次返回结果可以看出，LeftB函数把字母、数字和空格都当成一个字节。 Find()与FindB():返回指定字符位置在Excel中，查找指定字符在源字符串中的位置，既可以用Find()，也可以用FindB()，它们都有三个参数，所不同的是，前者把汉字、字母和数字都算一个字符，后者把汉字算两个字节，数字和字母算一个字节。 语法 Find() 表达式：FIND(Find_Text, Within_Text, [Start_Num]) 中文表达式：FIND(查找文本, 源文本, [查找开始位置]) FindB() 表达式：FINDB(Find_Text, Within_Text, [Start_Num]) 中文表达式：FINDB(查找文本, 源文本, [查找开始位置]) 说明： FIND和FINDB区分大小写，并且不允许使用通配符。如果希望执行区分大小写的搜索或使用通配符，则可以使用 SEARCH和SEARCHB函数。 如果find_text为空文本 (“”)，则FIND会匹配搜索字符串中的首字符（即编号为start_num或1的字符）。 Find_text不能包含任何通配符。 如果find_text未显示在within_text中, 则FIND和FINDB返回#VALUE!。 如果start_num不大于零, 则FIND和FINDB返回#VALUE!。 如果start_num大于within_text的长度, 则FIND和FINDB返回#VALUE!。 可以使用start_num来跳过指定数目的字符。以FIND为例，假设要处理文本字符串“AYF0093.YoungMensApparel”。若要在文本字符串的说明部分中查找第一个“Y”的编号，请将start_num设置为8，这样就不会搜索文本的序列号部分。FIND从第8个字符开始查找，在下一个字符处找到find_text，然后返回其编号9。FIND始终返回从within_text 的起始位置计算的字符编号，如果start_num大于1，则会对跳过的字符计数。 使用方法及实例 数据 A 2 Miriam McGovern 公式 说明 结果 =FIND(“M”,A2) 单元格 A2 中第一个“M”的位置 1 =FIND(“m”,A2) 单元格 A2 中第一个“M”的位置 6 =FIND(“M”,A2,3) 从单元格 A2 的第三个字符开始查找第一个“M”的位置 8 参考文章 微软支持-Excel-公式和函数 Excel Left函数与LeftB函数使用方法，含截取到倒数指定字符实例]]></content>
      <categories>
        <category>工具</category>
        <category>Excel</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[工作：天目云租户转成品库采集点增删改自动化查询]]></title>
    <url>%2F2019%2F07%2F31%2F%E5%B7%A5%E4%BD%9C%EF%BC%9A%E5%A4%A9%E7%9B%AE%E4%BA%91%E7%A7%9F%E6%88%B7%E8%BD%AC%E6%88%90%E5%93%81%E5%BA%93%E9%87%87%E9%9B%86%E7%82%B9%E5%A2%9E%E5%88%A0%E6%94%B9%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9F%A5%E8%AF%A2%2F</url>
    <content type="text"><![CDATA[请输入密码以阅读这篇私密文章。 Incorrect Password! No content to display! ]]></content>
  </entry>
  <entry>
    <title><![CDATA[Python：遍历列表时删除元素]]></title>
    <url>%2F2019%2F07%2F31%2FPython%EF%BC%9A%E9%81%8D%E5%8E%86%E5%88%97%E8%A1%A8%E6%97%B6%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0%2F</url>
    <content type="text"><![CDATA[Python的for循环可以遍历一个列表，但若需要同时将符合条件的元素删除时，则会出错。 示例 代码1123456s = [1, 2, 3, 4, 1, 1]s1 = sfor i in s1: if i == 1: s1.remove(i)print(s1) 输出1 1[2, 3, 4, 1] 代码2 12345s2 = sfor idx in range(len(s2)): if s2[idx] == 1: del s2[idx]print(s2) 输出2 1234Traceback (most recent call last): File "temp.py", line 11, in &lt;module&gt; if s2[idx] == 1:IndexError: list index out of range 出错原因Python中用for发起任何形式的遍历时，它的遍历顺序都是从最初就确定的，而在遍历中删除了元素会导致当前索引的变化，所以遍历中间取到的索引的那个值已经变了，会漏掉一些元素。另一种错误是删除元素后列表长度缩小了，所以会超出索引范围。 正确删除法使用filter()函数过滤掉符合指定条件的元素。12s3 = sprint(list(filter(lambda x: x != 1, s3))) 输出结果： 1[2, 3, 4] 此处lambda为Python中函数的简化定义形式。 使用列表解析式。12s4 = [i for i in s if i != 1]print(s4) 输出结果： 1[2, 3, 4] 拷贝一个新列表把原始列表拷贝给一个新列表，遍历新列表，修改原始列表（或相反）。 12345s6 = sfor i in s6[:]: if i == 1: s6.remove(i)print(s6) 输出结果： 1[2, 3, 4] 但是，下面的赋值操作给新列表是不行的，因为新变量和原变量的物理地址是相同的，可通过id()函数查看。 12345s5 = sfor i in s: if i == 1: s5.remove(i)print(s5) 输出结果： 1[2, 3, 4, 1] 通过深拷贝解决 1234567import copys5 = copy.deepcopy(s)for i in s: if i == 1: s5.remove(i)print(s5) 输出结果： 1[2, 3, 4] 用while循环来做判断条件。1234s7 = swhile 1 in s7: s7.remove(1)print(s7) 输出结果： 1[2, 3, 4]]]></content>
      <categories>
        <category>计算机</category>
        <category>语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>计算机：语言</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python学习：Python基础（中）]]></title>
    <url>%2F2019%2F07%2F24%2FPython%E5%AD%A6%E4%B9%A0%EF%BC%9APython%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%AD%EF%BC%89%2F</url>
    <content type="text"><![CDATA[数据结构（下）:Python容器列表：list list是由任意类型元素组成的序列。列表非常适合利用顺序和位置定位某一元素，尤其是当元素的顺序或内容经常发生改变时。与字符串不同，列表是可变的。你可以直接对原始列表进行修改：添加新元素、删除 或覆盖已有元素。在列表中，具有相同值的元素允许出现多次。 *Python中的三种序列结构：字符串，列表，元组。它们都可以包含零个或多个元素。与字符串不同的是，元组和列表并不要求所含元素的种类相同，每个元素都可以是任何Python类型的对象。而对于列表和元组来说，元组是不可变的，当你给元组赋值时，这些值便被固定在了元组里，再也无法修改。然而，列表却是可变的，这意味着可以随意地插入或删除其中的元素。 list =&gt; [&lt;exp&gt;,&lt;exp&gt;] 创建列表:使用[]或list()1234&gt;&gt;&gt; empty_list = [] &gt;&gt;&gt; weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'] &gt;&gt;&gt; big_birds = ['emu', 'ostrich', 'cassowary'] &gt;&gt;&gt; first_names = ['Graham', 'John', 'Terry', 'Terry', 'Michael'] 也可以使用list()函数来创建一个空列表： 123&gt;&gt;&gt; another_empty_list = list() &gt;&gt;&gt; another_empty_list [] 转换成列表:使用list()Python的list()函数可以将其他数据类型转换成列表类型。 123456789101112131415161718# 将字符串-》列表&gt;&gt;&gt; list('cat') ['c', 'a', 't']# 使用 split() 可以依据分隔符将字符串切割成由若干子串组成的列表：&gt;&gt;&gt; birthday = '1/6/1952' &gt;&gt;&gt; birthday.split('/') ['1', '6', '1952']# 如果待分割的字符串中包含连续的分隔符，那么在返回的列表中会出现空串元素：&gt;&gt;&gt; splitme = 'a/b//c/d///e' &gt;&gt;&gt; splitme.split('/') ['a', 'b', '', 'c', 'd', '', '', 'e']# 将元组-》列表&gt;&gt;&gt; a_tuple = ('ready', 'fire', 'aim') &gt;&gt;&gt; list(a_tuple) ['ready', 'fire', 'aim'] 获取列表元素：使用[offset]和字符串一样，通过偏移量可以从列表中提取对应位置的元素： 12345678910111213141516&gt;&gt;&gt; marxes = ['Groucho', 'Chico', 'Harpo'] &gt;&gt;&gt; marxes[0] 'Groucho' &gt;&gt;&gt; marxes[1] 'Chico' &gt;&gt;&gt; marxes[2] 'Harpo'#负偏移量代表从尾部开始计数：&gt;&gt;&gt; marxes[-1] 'Harpo' &gt;&gt;&gt; marxes[-2] 'Chico' &gt;&gt;&gt; marxes[-3] 'Groucho' &gt;&gt;&gt; *指定的偏移量对于待访问列表必须有效——该位置的元素在访问前已正确赋值。当指定的偏移量小于起始位置或者大于末尾位置时，会产生异常（错误）。 包含列表的列表列表可以包含各种类型的元素，包括其他列表，如下所示： 123456789101112&gt;&gt;&gt; small_birds = ['hummingbird', 'finch'] &gt;&gt;&gt; extinct_birds = ['dodo', 'passenger pigeon', 'Norwegian Blue'] &gt;&gt;&gt; carol_birds = [3, 'French hens', 2, 'turtledoves'] &gt;&gt;&gt; all_birds = [small_birds, extinct_birds, 'macaw', carol_birds]# all_birds结构&gt;&gt;&gt; all_birds [['hummingbird', 'finch'], ['dodo', 'passenger pigeon', 'Norwegian Blue'], 'macaw', [3, 'French hens', 2, 'turtledoves']]# all_birds第一个元素&gt;&gt;&gt; all_birds[0] ['hummingbird', 'finch'] 使用[offset]修改元素就像可以通过偏移量访问某元素一样，你也可以通过赋值对它进行修改： 1234&gt;&gt;&gt; marxes = ['Groucho', 'Chico', 'Harpo'] &gt;&gt;&gt; marxes[2] = 'Wanda' &gt;&gt;&gt; marxes ['Groucho', 'Chico', 'Wanda'] *与之前一样，列表的偏移量必须是合法有效的。 指定范围并使用切片提取元素列表的切片仍然是一个列表。可以使用切片提取列表的一个子序列,与字符串一样，列表的切片也可以设定除1以外的步长。 1234567891011&gt;&gt;&gt; marxes = ['Groucho', 'Chico,' 'Harpo'] &gt;&gt;&gt; marxes[0:2] ['Groucho', 'Chico']#从列表的开头开始每2个提取一个元素&gt;&gt;&gt; marxes[::2] ['Groucho', 'Harpo']# 可以巧妙地实现列表逆序：&gt;&gt;&gt; marxes[::-1] ['Harpo', 'Chico', 'Groucho'] 添加元素至尾部:使用append()利用append()函数将元素一个个添加到尾部。 123&gt;&gt;&gt; marxes.append('Zeppo') &gt;&gt;&gt; marxes ['Groucho', 'Chico', 'Harpo', 'Zeppo'] 合并列表：使用extend()或+=使用extend()可以将一个列表合并到另一个列表中。 12345&gt;&gt;&gt; marxes = ['Groucho', 'Chico', 'Harpo', 'Zeppo'] &gt;&gt;&gt; others = ['Gummo', 'Karl'] &gt;&gt;&gt; marxes.extend(others) &gt;&gt;&gt; marxes ['Groucho', 'Chico', 'Harpo', 'Zeppo', 'Gummo', 'Karl'] 也可以使用+=： 12345&gt;&gt;&gt; marxes = ['Groucho', 'Chico', 'Harpo', 'Zeppo'] &gt;&gt;&gt; others = ['Gummo', 'Karl'] &gt;&gt;&gt; marxes += others &gt;&gt;&gt; marxes ['Groucho', 'Chico', 'Harpo', 'Zeppo', 'Gummo', 'Karl'] 如果使用了append()，那么others会被当成一个单独的元素进行添加,而不是将其中的内容进行合并： 12345&gt;&gt;&gt; marxes = ['Groucho', 'Chico', 'Harpo', 'Zeppo'] &gt;&gt;&gt; others = ['Gummo', 'Karl'] &gt;&gt;&gt; marxes.append(others) &gt;&gt;&gt; marxes ['Groucho', 'Chico', 'Harpo', 'Zeppo', ['Gummo', 'Karl']] 在指定位置插入元素 :使用insert()append()函数只能将新元素插入到列表尾，而使用insert()可以将元素插入到列表的任 意位置。指定偏移量为0可以插入列表头部。如果指定的偏移量超过了尾部，则会插入到 列表最后，就如同append() 一样，这一操作不会产生 Python 异常。 12345&gt;&gt;&gt; marxes.insert(3, 'Gummo')&gt;&gt;&gt; marxes ['Groucho', 'Chico', 'Harpo', 'Gummo', 'Zeppo'] &gt;&gt;&gt; marxes.insert(10, 'Karl') &gt;&gt;&gt; marxes ['Groucho', 'Chico', 'Harpo', 'Gummo', 'Zeppo', 'Karl'] 删除指定位置的元素:使用del当列表中一个元素被删除后,位于它后面的元素会自动往前移动填补空出的位置，且列表 长度减 1。再试试从更新后的marxes列表中删除&#39;Harpo&#39;： 1234567&gt;&gt;&gt; marxes = ['Groucho', 'Chico', 'Harpo', 'Gummo', 'Zeppo'] &gt;&gt;&gt; marxes[2] 'Harpo' &gt;&gt;&gt; del marxes[2] &gt;&gt;&gt; marxes ['Groucho', 'Chico', 'Gummo', 'Zeppo'] &gt;&gt;&gt; marxes[2] 'Gummo' 在列表首删除/插入一个元素与在列表尾插入一个元素所用的时间是谁大？或者一样？123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051# 计算时间函数&gt;&gt;&gt; from time import clock&gt;&gt;&gt; def timer(f):&gt;&gt;&gt; def _f(*args):&gt;&gt;&gt; t0 = clock()&gt;&gt;&gt; f(*args)&gt;&gt;&gt; return clock() - t0&gt;&gt;&gt; return _f # 删除 &gt;&gt;&gt; def delete_elem(x, index):&gt;&gt;&gt; del x[index]&gt;&gt;&gt; x = [5] * 100000000&gt;&gt;&gt; print(x[0])5&gt;&gt;&gt; print(x[999999])5&gt;&gt;&gt; print(len(x))100000000&gt;&gt;&gt; end_del = timer(delete_elem)(x, -1)&gt;&gt;&gt; print('现在list长度:',len(x))现在list长度: 99999999&gt;&gt;&gt; start_del = timer(delete_elem)(x, 0)&gt;&gt;&gt; print('现在list长度:',len(x))现在list长度: 99999998&gt;&gt;&gt; print('删首时间/删尾时间',start_del/end_del)删首时间/删尾时间 5339.656807434651# 插入&gt;&gt;&gt; def insert_elem(x, index, v):&gt;&gt;&gt; x.insert(index, v) &gt;&gt;&gt; x = [5] * 100000000&gt;&gt;&gt; print(x[0])5&gt;&gt;&gt; print(x[999999])5&gt;&gt;&gt; print(len(x))100000000&gt;&gt;&gt; start_del = timer(insert_elem)(x, 0, 9)&gt;&gt;&gt; print(len(x))100000001&gt;&gt;&gt; end_del = timer(insert_elem)(x, -1, 9)&gt;&gt;&gt; print(len(x))100000002&gt;&gt;&gt; print('删首时间/删尾时间',start_del/end_del)删首时间/删尾时间 200615.78078284615 由上面可知在列表首删除/插入一个元素远远大于在列表尾插入一个元素所用的时间。原因在于列表在存储时，是存在于一片连续的储存单元中。删除最后一个元素时候，只要根据index找到该元素，然后删除。而删除第一个元素时候，需要找到第一个元素删除的同时，需要把其后面的元素移前一个位置。插入同理。 删除具有指定值的元素:使用remove()1234&gt;&gt;&gt; marxes = ['Groucho', 'Chico', 'Harpo', 'Gummo', 'Zeppo'] &gt;&gt;&gt; marxes.remove('Gummo') &gt;&gt;&gt; marxes ['Groucho', 'Chico', 'Harpo', 'Zeppo'] 获取并删除指定位置的元素:使用pop()使用pop()同样可以获取列表中指定位置的元素，但在获取完成后，该元素会被自动删除。如果你为pop()指定了偏移量，它会返回偏移量对应位置的元素；如果不指定，则默认使用-1。因此，pop(0)将返回列表的头元素，而pop()或pop(-1)则会返回列表的尾元素 123456789&gt;&gt;&gt; marxes = ['Groucho', 'Chico', 'Harpo', 'Zeppo'] &gt;&gt;&gt; marxes.pop() 'Zeppo' &gt;&gt;&gt; marxes ['Groucho', 'Chico', 'Harpo'] &gt;&gt;&gt; marxes.pop(1) 'Chico' &gt;&gt;&gt; marxes ['Groucho', 'Harpo'] 查询具有特定值的元素位置:使用index()如果该查询的元素在列表中不存在，使用index时会报异常。 123&gt;&gt;&gt; marxes = ['Groucho', 'Chico', 'Harpo', 'Zeppo'] &gt;&gt;&gt; marxes.index('Chico') 1 判断值是否存在：使用in同一个值可能出现在列表的多个位置，但只要至少出现一次，in就会返回True： 12&gt;&gt;&gt; words = ['a', 'deer', 'a' 'female', 'deer'] &gt;&gt;&gt; 'deer' in words True 记录特定值出现的次数:使用count()123456789&gt;&gt;&gt; marxes = ['Groucho', 'Chico', 'Harpo'] &gt;&gt;&gt; marxes.count('Harpo') 1 &gt;&gt;&gt; marxes.count('Bob')0 &gt;&gt;&gt; snl_skit = ['cheeseburger', 'cheeseburger', 'cheeseburger']&gt;&gt;&gt; snl_skit.count('cheeseburger') 3 转换为字符串:使用join()join()实际上是一个字符串方法，而不是列表方法。不能通过marxes.join(&#39;,&#39;)进行调用，尽管这可能看起来更直观。join() 函数的参数是字符串或者其他可迭代的包含字符串的序列，它的输出是一个字符串。。试着这样来记忆 join() 的调用顺序： join()是split()的逆过程 12345678910111213&gt;&gt;&gt; marxes = ['Groucho', 'Chico', 'Harpo'] &gt;&gt;&gt; ', '.join(marxes) 'Groucho, Chico, Harpo'&gt;&gt;&gt; friends = ['Harry', 'Hermione', 'Ron'] &gt;&gt;&gt; separator = ' * ' &gt;&gt;&gt; joined = separator.join(friends) &gt;&gt;&gt; joined 'Harry * Hermione * Ron' &gt;&gt;&gt; separated = joined.split(separator) &gt;&gt;&gt; separated ['Harry', 'Hermione', 'Ron'] &gt;&gt;&gt; separated == friends True 获取长度:使用len()123&gt;&gt;&gt; marxes = ['Groucho', 'Chico', 'Harpo'] &gt;&gt;&gt; len(marxes) 3 使用sort()重新排列元素将列表中的元素按值排序,Python 为此 提供了两个函数： 列表方法sort()会对原列表进行排序，改变原列表内容； 通用函数sorted()则会返回排好序的列表副本，原列表内容不变。 如果列表中的元素都是数字，它们会默认地被排列成从小到大的升序。如果元素都是字符 串，则会按照字母表顺序排列 1234567891011# sorted_marxes是一个副本，它的创建并不会改变原始列表的内容&gt;&gt;&gt; marxes = ['Groucho', 'Chico', 'Harpo'] &gt;&gt;&gt; sorted_marxes = sorted(marxes) &gt;&gt;&gt; sorted_marxes ['Chico', 'Groucho', 'Harpo']&gt;&gt;&gt; marxes ['Groucho', 'Chico', 'Harpo']# 但对 marxes 列表调用列表函数 sort() 则会改变它的内容&gt;&gt;&gt; marxes.sort() &gt;&gt;&gt; marxes ['Chico', 'Groucho', 'Harpo'] 当列表中的所有元素都是同一种类型时（例如marxes中都是字符串），sort()会正常工作。有些时候甚至多种类型也可——例如整型和浮点型——只要它们之间能够自动地互相转换 123&gt;&gt;&gt; numbers = [2, 1, 4.0, 3] &gt;&gt;&gt; numbers.sort() &gt;&gt;&gt; numbers [1, 2, 3, 4.0] 默认的排序是升序的，通过添加参数reverse=True可以改变为降序排列 1234&gt;&gt;&gt; numbers = [2, 1, 4.0, 3] &gt;&gt;&gt; numbers.sort(reverse=True) &gt;&gt;&gt; numbers[4.0, 3, 2, 1] 使用=赋值，使用copy()复制如果将一个列表赋值给了多个变量，改变其中的任何一处会造成其他变量对应的值也被修改。 1234567&gt;&gt;&gt; a = [1, 2, 3] &gt;&gt;&gt; a [1, 2, 3] &gt;&gt;&gt; b = a &gt;&gt;&gt; b [1, 2, 3] &gt;&gt;&gt; a[0] = 'surprise' &gt;&gt;&gt; a ['surprise', 2, 3]&gt;&gt;&gt; b ['surprise', 2, 3] b与a实际上指向的是同一个对象，因此，无论我们是通过a还是通过b来修改列表的内容，其结果都会作用于双方。通过下面任意一种方法，都可以将一个列表的值复制到另一个新的列表中： 列表copy()函数 list()转换函数 列表分片[:]1234567891011121314&gt;&gt;&gt; a = [1, 2, 3] &gt;&gt;&gt; b = a.copy() &gt;&gt;&gt; c = list(a) &gt;&gt;&gt; d = a[:]&gt;&gt;&gt; a[0] = 'integer lists are boring' &gt;&gt;&gt; a ['integer lists are boring', 2, 3] &gt;&gt;&gt; b [1, 2, 3] &gt;&gt;&gt; c [1, 2, 3] &gt;&gt;&gt; d [1, 2, 3] 元组：Tuple元组也是由任意类型元素组成的序列。与列表不同的是，元组是不可变的，这意味着一旦元组被定义，将无法再进行增加、删除或修改元素等操作。因此，元组就像是一个常量列表。 创建元组：使用()可以用 () 创建一个空元组： 123&gt;&gt;&gt; empty_tuple = () &gt;&gt;&gt; empty_tuple () 创建包含一个或多个元素的元组时，每一个元素后面都需要跟着一个逗号，即使只包含一个元素也不能省略： 123&gt;&gt;&gt; one_marx = 'Groucho', &gt;&gt;&gt; one_marx ('Groucho',) 如果创建的元组所包含的元素数量超过1，最后一个元素后面的逗号可以省略： 123&gt;&gt;&gt; marx_tuple = 'Groucho', 'Chico', 'Harpo' &gt;&gt;&gt; marx_tuple ('Groucho', 'Chico', 'Harpo') Python的交互式解释器输出元组时会自动添加一对圆括号。你并不需要这么做——定义元组真正靠的是每个元素的后缀逗号——但如果你习惯添加一对括号也无可厚非。可以用括号将所有元素包裹起来，这会使得程序更加清晰： 123&gt;&gt;&gt; marx_tuple = ('Groucho', 'Chico', 'Harpo') &gt;&gt;&gt; marx_tuple ('Groucho', 'Chico', 'Harpo') 可以一口气将元组赋值给多个变量：(有时这个过程被称为元组解包。) 12345678&gt;&gt;&gt; marx_tuple = ('Groucho', 'Chico', 'Harpo') &gt;&gt;&gt; a, b, c = marx_tuple &gt;&gt;&gt; a 'Groucho' &gt;&gt;&gt; b 'Chico' &gt;&gt;&gt; c 'Harpo' 可以利用元组在一条语句中对多个变量的值进行交换，而不需要借助临时变量： 1234567&gt;&gt;&gt; password = 'swordfish' &gt;&gt;&gt; icecream = 'tuttifrutti' &gt;&gt;&gt; password, icecream = icecream, password &gt;&gt;&gt; password 'tuttifrutti' &gt;&gt;&gt; icecream 'swordfish' tuple() 函数可以用其他类型的数据来创建元组： 123&gt;&gt;&gt; marx_list = ['Groucho', 'Chico', 'Harpo'] &gt;&gt;&gt; tuple(marx_list) ('Groucho', 'Chico', 'Harpo') 元组与列表在许多地方都可以用元组代替列表，但元组的方法函数与列表相比要少一些——元组没有append()、insert()，等等——因为一旦创建元组便无法修改。既然列表更加灵活，那为什么不在所有地方都使用列表呢？原因如下所示： 元组占用的空间较小 你不会意外修改元组的值 可以将元组用作字典的键 - 命名元组可以作为对象的替代 函数的参数是以元组形式传递的 字典: dict字典（dictionary）与列表类似，但其中元素的顺序无关紧要，因为它们不是通过像0或1的偏移量访问的。取而代之，每个元素拥有与之对应的互不相同的键（key），需要通过键来访问元素。键通常是字符串，但它还可以是Python中其他任意的不可变类型：布尔型、 整型、浮点型、元组、字符串，以及其他一些在后面的内容中会见到的类型。字典是可变的，因此你可以增加、删除或修改其中的键值对。 创建字典:使用{}用大括号（{}）将一系列以逗号隔开的键值对（key:value）包裹起来即可进行字典的创建。最简单的字典是空字典，它不包含任何键值对： 12345678910111213141516&gt;&gt;&gt; empty_dict = &#123;&#125; &gt;&gt;&gt; empty_dict &#123;&#125;&gt;&gt;&gt; pizza = &#123; "size":"medium", "type":"pepperoni", "crust":"Thick", "qty": 1, "deliver":True,&#125;&#123;'size': 'medium', 'type': 'pepperoni', 'crust': 'Thick', 'qty': 1, 'deliver': True&#125; Python 允许在列表、元组或字典的最后一个元素后面添加逗号，这不会产生任何问题。此外，在括号之间输入键值对来创建字典时并不强制缩进。 转换为字典：使用dict()可以用 dict() 将包含双值子序列的序列转换成字典。每个子序列 的第一个元素作为键，第二个元素作为值。 1234567&gt;&gt;&gt; lot = [ ('a', 'b'), ('c', 'd'), ('e', 'f') ] &gt;&gt;&gt; dict(lot) &#123;'c': 'd', 'a': 'b', 'e': 'f'&#125;&gt;&gt;&gt; los = [ 'ab', 'cd', 'ef' ] &gt;&gt;&gt; dict(los) &#123;'c': 'd', 'a': 'b', 'e': 'f'&#125; 添加或修改元素:使用[key]向字典中添加元素非常简单，只需指定该元素的键并赋予相应的值即可。如果该元素的键已经存在于字典中，那么该键对应的旧值会被新值取代。如果该元素的键并未在字典中出现，则会被加入字典。与列表不同，你不需要担心赋值过程中Python 会抛出越界异常。 123456789101112131415161718192021222324252627282930313233&gt;&gt;&gt; pythons = &#123; 'Chapman': 'Graham', 'Cleese': 'John', 'Idle': 'Eric', 'Jones': 'Terry', 'Palin': 'Michael', &#125; &gt;&gt;&gt; pythons &#123;'Cleese': 'John','Jones': 'Terry', 'Palin': 'Michael','Chapman': 'Graham', 'Idle': 'Eric'&#125;# 新增 pythons['Gilliam'] = 'Gerry'&gt;&gt;&gt; pythons['Gilliam'] = 'Gerry' &gt;&gt;&gt; pythons &#123;'Cleese': 'John', 'Gilliam': 'Gerry', 'Palin': 'Michael', 'Chapman': 'Graham', 'Idle': 'Eric', 'Jones': 'Terry'&#125;# 修改pythons['Gilliam'] = 'Terry'&gt;&gt;&gt; pythons['Gilliam'] = 'Terry' &gt;&gt;&gt; pythons &#123;'Cleese': 'John', 'Gilliam': 'Terry', 'Palin': 'Michael', 'Chapman': 'Graham', 'Idle': 'Eric', 'Jones': 'Terry'&#125; 合并字典：使用update()如果待添加的字典与待扩充的字典包含同样的键，那么新归入字典的值会取代原有的值 12345&gt;&gt;&gt; first = &#123;'a': 1, 'b': 2&#125; &gt;&gt;&gt; second = &#123;'b': 'platypus'&#125; &gt;&gt;&gt; first.update(second) &gt;&gt;&gt; first &#123;'b': 'platypus', 'a': 1&#125; 删除具有指定键的元素:使用del1234&gt;&gt;&gt; first = &#123;'a': 1, 'b': 2&#125; &gt;&gt;&gt; del first['a']&gt;&gt;&gt; first&#123;'b': 2&#125; 删除所有元素:使用clear()使用clear()，或者给字典变量重新赋值一个空字典（{}）可以将字典中所有元素删除： 123456&gt;&gt;&gt; pythons.clear() &gt;&gt;&gt; pythons &#123;&#125; &gt;&gt;&gt; pythons = &#123;&#125; &gt;&gt;&gt; pythons&#123;&#125; 使用in判断是否存在如果你希望判断某一个键是否存在于一个字典中，可以使用in。 12345&gt;&gt;&gt; pythons = &#123;'Chapman': 'Graham', 'Cleese': 'John', 'Jones': 'Terry', 'Palin': 'Michael'&#125;&gt;&gt;&gt; 'Chapman' in pythons True &gt;&gt;&gt; 'Palin' in pythons True 使用[key]获取元素这是对字典最常进行的操作，只需指定字典名和键即可获得对应的值： 12&gt;&gt;&gt; pythons['Cleese'] 'John' 如果字典中不包含指定的键，会产生一个异常。有两种方法可以避免这种情况的发生。第一种是在访问前通过in测试键是否存在，另一种方法是使用字典函数get()。你需要指定字典名，键以及一个可选值。如果键存在，会得到与之对应的值反之，若键不存在，如果你指定了可选值，那么get()函数将返回这个可选值,否则，会得到None（在交互式解释器中什么也不会显示）： 12345678&gt;&gt;&gt; pythons.get('Cleese') 'John'&gt;&gt;&gt; pythons.get('Marx', 'Not a Python') 'Not a Python'&gt;&gt;&gt; pythons.get('Marx') &gt;&gt;&gt; 获取所有键:使用keys()使用keys()可以获得字典中的所有键。在接下来的几个例子中，我们将换一个示例： 123&gt;&gt;&gt; signals = &#123;'green': 'go', 'yellow': 'go faster', 'red': 'smile for the camera'&#125; &gt;&gt;&gt; signals.keys() dict_keys(['green', 'red', 'yellow']) 在Python 2里，keys()会返回一个列表，而在Python 3中则会返回dict_keys()，它是键的迭代形式。这种返回形式对于大型的字典非常有用，因为它不需要时间和空间来创建返回的列表。有时你需要的可能就是一个完整的列表，但在Python 3中，你只能自己调用list()将dict_keys转换为列表类型。 获取所有值:使用values()使用 values()可以获取字典中的所有值： 12&gt;&gt;&gt; list( signals.values() ) ['go', 'smile for the camera', 'go faster'] 获取所有键值对:使用items()使用items()函数可以获取字典中所有的键值对： 12&gt;&gt;&gt; list( signals.items() ) [('green', 'go'), ('red', 'smile for the camera'), ('yellow', 'go faster')] 每一个键值对以元组的形式返回，例如(&#39;green&#39;,&#39;go&#39;)。 使用=赋值，使用copy()复制与列表一样，对字典内容进行的修改会反映到所有与之相关联的变量名上： 12345&gt;&gt;&gt; signals = &#123;'green': 'go', 'yellow': 'go faster', 'red': 'smile for the camera'&#125; &gt;&gt;&gt; save_signals = signals &gt;&gt;&gt; signals['blue'] = 'confuse everyone' &gt;&gt;&gt; save_signals&#123;'blue': 'confuse everyone', 'green': 'go', 'red': 'smile for the camera', 'yellow': 'go faster'&#125; 若想避免这种情况，可以使用copy(),将字典复制到一个新的字典中： 1234567&gt;&gt;&gt; signals = &#123;'green': 'go', 'yellow': 'go faster', 'red': 'smile for the camera'&#125; &gt;&gt;&gt; original_signals = signals.copy() &gt;&gt;&gt; signals['blue'] = 'confuse everyone' &gt;&gt;&gt; signals &#123;'blue': 'confuse everyone', 'green': 'go', 'red': 'smile for the camera', 'yellow': 'go faster'&#125; &gt;&gt;&gt; original_signals &#123;'green': 'go', 'red': 'smile for the camera', 'yellow': 'go faster'&#125; 集合：set集合就像舍弃了值，仅剩下键的字典一样。键与键之间也不允许重复。如果你仅仅想知道某一个元素是否存在而不关心其他的，使用集合是个非常好的选择。 创建集合:使用set()与字典的键一样，集合是无序的。 123456789&gt;&gt;&gt; empty_set = set() &gt;&gt;&gt; empty_set set() &gt;&gt;&gt; even_numbers = &#123;0, 2, 4, 6, 8&#125; &gt;&gt;&gt; even_numbers &#123;0, 8, 2, 4, 6&#125; &gt;&gt;&gt; odd_numbers = &#123;1, 3, 5, 7, 9&#125; &gt;&gt;&gt; odd_numbers &#123;9, 3, 1, 5, 7&#125; 将其他类型转换为集合:使用set()利用已有列表、字符串、元组或字典的内容来创建集合，其中重复的值会被丢弃。 1234&gt;&gt;&gt; set( 'letters' )&#123;'l', 'e', 't', 'r', 's'&#125;&gt;&gt;&gt; set( ('Ummagumma', 'Echoes', 'Atom Heart Mother') ) &#123;'Ummagumma', 'Atom Heart Mother', 'Echoes'&#125; 测试值是否存在:使用in123&gt;&gt;&gt; martini = &#123;'vodka', 'vermouth'&#125;&gt;&gt;&gt; 'vodka' in martiniTrue 合并及运算符交集：通过使用特殊标点符号&amp;或者集合函数intersection() 获取集合的交集（两集合共有元素） 123456&gt;&gt;&gt; a = &#123;1, 2&#125; &gt;&gt;&gt; b = &#123;2, 3&#125;&gt;&gt;&gt; a &amp; b &#123;2&#125; &gt;&gt;&gt; a.intersection(b) &#123;2&#125; 并集：使用 |或者union()函数来获取集合的并集（至少出现在一个集合中的元素）： 123456&gt;&gt;&gt; a = &#123;1, 2&#125; &gt;&gt;&gt; b = &#123;2, 3&#125;&gt;&gt;&gt; a | b &#123;1, 2, 3&#125; &gt;&gt;&gt; a.union(b) &#123;1, 2, 3&#125; 差集：使用字符-或者difference()可以获得两个集合的差集（出现在第一个集合但不出现在第二个集合）： 1234&gt;&gt;&gt; a - b &#123;1&#125; &gt;&gt;&gt; a.difference(b) &#123;1&#125; 异或集:使用^或者symmetric_difference()可以获得两个集合的异或集（仅在两个集合中出现一次）： 1234&gt;&gt;&gt; a ^ b &#123;1, 3&#125; &gt;&gt;&gt; a.symmetric_difference(b) &#123;1, 3&#125; 子集：使用&lt;=或者issubset()可以判断一个集合是否是另一个集合的子集（第一个集合的所有元素都出现在第二个集合中）： 1234&gt;&gt;&gt; a &lt;= b False &gt;&gt;&gt; a.issubset(b) False 真子集:当第二个集合包含所有第一个集合的元素，且仍包含其他元素时，我们称第一个集合为第二个集合的真子集。使用&lt;可以进行判断： 1234&gt;&gt;&gt; a &lt; b False &gt;&gt;&gt; a &lt; a False 超集：超集与子集正好相反（第二个集合的所有元素都出现在第一个集合中），使用 &gt;=或者 issuperset() 可以进行判断： 1234&gt;&gt;&gt; a &gt;= b False &gt;&gt;&gt; a.issuperset(b) False 一个集合是它本身的超集： 1234&gt;&gt;&gt; a &gt;= a True &gt;&gt;&gt; a.issuperset(a) True 真超集:使用&gt;可以找到一个集合的真超集（第一个集合包含第二个集合的所有元素且还包含其他元素）： 12&gt;&gt;&gt; a &gt; b False]]></content>
      <categories>
        <category>计算机</category>
        <category>语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>计算机：语言</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[工作：媒立方采集点数据与天目云采集点差异比较]]></title>
    <url>%2F2019%2F07%2F17%2F%E5%B7%A5%E4%BD%9C%EF%BC%9A%E5%AA%92%E7%AB%8B%E6%96%B9%E9%87%87%E9%9B%86%E7%82%B9%E6%95%B0%E6%8D%AE%E4%B8%8E%E5%A4%A9%E7%9B%AE%E4%BA%91%E9%87%87%E9%9B%86%E7%82%B9%E5%B7%AE%E5%BC%82%E6%AF%94%E8%BE%83%2F</url>
    <content type="text"><![CDATA[请输入密码以阅读这篇私密文章。 Incorrect Password! No content to display! ]]></content>
  </entry>
  <entry>
    <title><![CDATA[Python：excel处理（xld与xlwt）]]></title>
    <url>%2F2019%2F07%2F16%2FPython%EF%BC%9Aexcel%E5%A4%84%E7%90%86%EF%BC%88xld%E4%B8%8Exlwt%EF%BC%89%2F</url>
    <content type="text"><![CDATA[excel处理工具:xlrd与xlwt xlrd是python语言中读取excel的扩展工具包，可以实现指定表单、指定单元格的读取。 xlwt是python语言中写excel的扩展工具包，可以实现指定表单、指定单元格的写入。 一、xlrd安装使用 pip install xlrd 来安装xlrd模块。 基本操作123456789101112131415161718192021222324252627282930313233343536# 示例：# 导入扩展包import xlrd# 打开Excel文件读取数据data = xlrd.open_workbook('excelFile.xls') [1] # 获取一个工作表table = data.sheets()[0] #通过索引顺序获取table = data.sheet_by_index(0) #通过索引顺序获取table = data.sheet_by_name(u'Sheet1') #通过名称获取# 获取整行和整列的值（数组）table.row_values(i)table.col_values(i)# 获取行数和列数nrows = table.nrowsncols = table.ncols# 循环行列表数据for i in range(nrows ):print table.row_values(i)# 单元格table.cell(rowx,colx)cell_A1 = table.cell(0,0).valuecell_C4 = table.cell(3,2).value# 使用行列索引cell_A1 = table.row(0)[0].valuecell_A2 = table.col(1)[0].value# 简单的写入row = 0col = 0# 常用单元格中的类型 empty,1 string, 2 number, 3 date, 4 boolean, 5 error, 6 blankctype = 1 value = '单元格的值'# 扩展的格式化xf = 0 table.put_cell(row, col, ctype, value, xf)table.cell(0,0) #单元格的值'table.cell(0,0).value #单元格的值' 二、xlwt安装使用 pip install xlwt 来安装xlwt模块。 基本操作12345678910# 导入模块import xlwt# 创建workbook（其实就是excel，后来保存一下就行）workbook = xlwt.Workbook(encoding = 'ascii')# 创建表worksheet = workbook.add_sheet('My Worksheet')# 往单元格内写入内容worksheet.write(0, 0, label = 'Row 0, Column 0 Value')# 保存workbook.save('Excel_Workbook.xls')]]></content>
      <categories>
        <category>计算机</category>
        <category>语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>计算机：语言</tag>
      </tags>
  </entry>
</search>
